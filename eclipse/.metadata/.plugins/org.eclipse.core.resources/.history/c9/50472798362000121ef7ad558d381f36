// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces deadcode fieldsfirst 

package net.minecraft.src;

import java.util.List;
import net.minecraft.client.Minecraft;
import org.lwjgl.opengl.GL11;

// Referenced classes of package net.minecraft.src:
//            GuiSlot, GuiMultiplayer, GuiButton, ServerNBTStorage, 
//            ThreadPollServers, FontRenderer, RenderEngine, Tessellator

class GuiSlotReplay extends GuiSlot {

	private final GuiReplays parent;

	public GuiSlotReplay(GuiReplays parent) {
		super(parent.mc, parent.width, parent.height, 32, parent.height - 64, 36);
		this.parent = parent;
	}

	@Override
	protected int getSize() {
		return parent.replaysList.size();
	}

	protected void elementClicked(int i, boolean flag) {
		parent.selectedReplay = i;
		boolean flag1 = parent.selectedReplay >= 0 && parent.selectedReplay < getSize();
		/*
		 * Enable some buttons
		 */
		if(flag && flag1) {
			GuiMultiplayer.joinServer(parent, i);
		}
	}

	protected boolean isSelected(int i) {
		return i == GuiMultiplayer.getSelectedServer(parent);
	}

	protected int getContentHeight() {
		return GuiMultiplayer.getServerList(parent).size() * 36;
	}

	protected void drawBackground() {
		parent.drawDefaultBackground();
	}

	protected void drawSlot(int i, int j, int k, int l, Tessellator tessellator) {
		ServerNBTStorage servernbtstorage = (ServerNBTStorage) GuiMultiplayer.getServerList(parent).get(i);
		synchronized(GuiMultiplayer.getLock()) {
			if(GuiMultiplayer.getThreadsPending() < 5 && !servernbtstorage.polled) {
				servernbtstorage.polled = true;
				servernbtstorage.lag = -2L;
				servernbtstorage.motd = "";
				servernbtstorage.playerCount = "";
				GuiMultiplayer.incrementThreadsPending();
				(new ThreadPollServers(this, servernbtstorage)).start();
			}
		}
		parent.drawString(parent.fontRenderer, servernbtstorage.name, j + 2, k + 1, 0xffffff);
		parent.drawString(parent.fontRenderer, servernbtstorage.motd, j + 2, k + 12, 0x808080);
		parent.drawString(parent.fontRenderer, servernbtstorage.playerCount, (j + 215) - parent.fontRenderer.getStringWidth(servernbtstorage.playerCount), k + 12, 0x808080);
		parent.drawString(parent.fontRenderer, servernbtstorage.host, j + 2, k + 12 + 11, 0x303030);
		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
		parent.mc.renderEngine.bindTexture(parent.mc.renderEngine.getTexture("/gui/icons.png"));
		int i1 = 0;
		int j1 = 0;
		String s = "";
		if(servernbtstorage.polled && servernbtstorage.lag != -2L) {
			i1 = 0;
			j1 = 0;
			if(servernbtstorage.lag < 0L) {
				j1 = 5;
			} else if(servernbtstorage.lag < 150L) {
				j1 = 0;
			} else if(servernbtstorage.lag < 300L) {
				j1 = 1;
			} else if(servernbtstorage.lag < 600L) {
				j1 = 2;
			} else if(servernbtstorage.lag < 1000L) {
				j1 = 3;
			} else {
				j1 = 4;
			}
			if(servernbtstorage.lag < 0L) {
				s = "(no connection)";
			} else {
				s = (new StringBuilder()).append(servernbtstorage.lag).append("ms").toString();
			}
		} else {
			i1 = 1;
			j1 = (int) (System.currentTimeMillis() / 100L + (long) (i * 2) & 7L);
			if(j1 > 4) {
				j1 = 8 - j1;
			}
			s = "Polling..";
		}
		parent.drawTexturedModalRect(j + 205, k, 0 + i1 * 10, 176 + j1 * 8, 10, 8);
		byte byte0 = 4;
		if(field_35409_k >= (j + 205) - byte0 && field_35408_l >= k - byte0 && field_35409_k <= j + 205 + 10 + byte0 && field_35408_l <= k + 8 + byte0) {
			GuiMultiplayer.func_35327_a(parent, s);
		}
	}
}
