package net.minecraft.src;

import net.minecraft.client.Minecraft;

/**
 * GreenCubes
 * @author Feyola
 *
 */

public class mod_gc extends BaseMod {
	
    public static int SlopesRenderID;
    public boolean enableAO;
    public float aoLightValueThis;
    public float aoLightValueXNeg;
    public float aoLightValueYNeg;
    public float aoLightValueZNeg;
    public float aoLightValueXPos;
    public float aoLightValueYPos;
    public float aoLightValueZPos;
    public float aoLightValueXNegYNegZNeg;
    public float aoLightValueXNegYNeg;
    public float aoLightValueXNegYNegZPos;
    public float aoLightValueYNegZNeg;
    public float aoLightValueYNegZPos;
    public float aoLightValueXPosYNegZNeg;
    public float aoLightValueXPosYNeg;
    public float aoLightValueXPosYNegZPos;
    public float aoLightValueXNegYPosZNeg;
    public float aoLightValueXNegYPos;
    public float aoLightValueXNegYPosZPos;
    public float aoLightValueYPosZNeg;
    public float aoLightValueXPosYPosZNeg;
    public float aoLightValueXPosYPos;
    public float aoLightValueYPosZPos;
    public float aoLightValueXPosYPosZPos;
    public float aoLightValueXNegZNeg;
    public float aoLightValueXPosZNeg;
    public float aoLightValueXNegZPos;
    public float aoLightValueXPosZPos;
    public int field_22352_G;
    public boolean isBlockYPosZNeg;
    public boolean isBlockXPosYPos;
    public boolean isBlockXNegYPos;
    public boolean isBlockYPosZPos;
    public boolean isBlockXNegZNeg;
    public boolean isBlockXPosZPos;
    public boolean isBlockXNegZPos;
    public boolean isBlockXPosZNeg;
    public boolean isBlockYNegZNeg;
    public boolean isBlockXPosYNeg;
    public boolean isBlockXNegYNeg;
    public boolean isBlockYNegZPos;
    public float colorRedTopLeft_TopFace;
    public float colorRedBottomLeft_TopFace;
    public float colorRedBottomRight_TopFace;
    public float colorRedTopRight_TopFace;
    public float colorGreenTopLeft_TopFace;
    public float colorGreenBottomLeft_TopFace;
    public float colorGreenBottomRight_TopFace;
    public float colorGreenTopRight_TopFace;
    public float colorBlueTopLeft_TopFace;
    public float colorBlueBottomLeft_TopFace;
    public float colorBlueBottomRight_TopFace;
    public float colorBlueTopRight_TopFace;
    public float colorRedTopLeft_BottomFace;
    public float colorRedBottomLeft_BottomFace;
    public float colorRedBottomRight_BottomFace;
    public float colorRedTopRight_BottomFace;
    public float colorGreenTopLeft_BottomFace;
    public float colorGreenBottomLeft_BottomFace;
    public float colorGreenBottomRight_BottomFace;
    public float colorGreenTopRight_BottomFace;
    public float colorBlueTopLeft_BottomFace;
    public float colorBlueBottomLeft_BottomFace;
    public float colorBlueBottomRight_BottomFace;
    public float colorBlueTopRight_BottomFace;
    public float colorRedTopLeft_EastFace;
    public float colorRedBottomLeft_EastFace;
    public float colorRedBottomRight_EastFace;
    public float colorRedTopRight_EastFace;
    public float colorGreenTopLeft_EastFace;
    public float colorGreenBottomLeft_EastFace;
    public float colorGreenBottomRight_EastFace;
    public float colorGreenTopRight_EastFace;
    public float colorBlueTopLeft_EastFace;
    public float colorBlueBottomLeft_EastFace;
    public float colorBlueBottomRight_EastFace;
    public float colorBlueTopRight_EastFace;
    public float colorRedTopLeft_WestFace;
    public float colorRedBottomLeft_WestFace;
    public float colorRedBottomRight_WestFace;
    public float colorRedTopRight_WestFace;
    public float colorGreenTopLeft_WestFace;
    public float colorGreenBottomLeft_WestFace;
    public float colorGreenBottomRight_WestFace;
    public float colorGreenTopRight_WestFace;
    public float colorBlueTopLeft_WestFace;
    public float colorBlueBottomLeft_WestFace;
    public float colorBlueBottomRight_WestFace;
    public float colorBlueTopRight_WestFace;
    public float colorRedTopLeft_NorthFace;
    public float colorRedBottomLeft_NorthFace;
    public float colorRedBottomRight_NorthFace;
    public float colorRedTopRight_NorthFace;
    public float colorGreenTopLeft_NorthFace;
    public float colorGreenBottomLeft_NorthFace;
    public float colorGreenBottomRight_NorthFace;
    public float colorGreenTopRight_NorthFace;
    public float colorBlueTopLeft_NorthFace;
    public float colorBlueBottomLeft_NorthFace;
    public float colorBlueBottomRight_NorthFace;
    public float colorBlueTopRight_NorthFace;
    public float colorRedTopLeft_SouthFace;
    public float colorRedBottomLeft_SouthFace;
    public float colorRedBottomRight_SouthFace;
    public float colorRedTopRight_SouthFace;
    public float colorGreenTopLeft_SouthFace;
    public float colorGreenBottomLeft_SouthFace;
    public float colorGreenBottomRight_SouthFace;
    public float colorGreenTopRight_SouthFace;
    public float colorBlueTopLeft_SouthFace;
    public float colorBlueBottomLeft_SouthFace;
    public float colorBlueBottomRight_SouthFace;
    public float colorBlueTopRight_SouthFace;
    public float colorRedSlopes;
    public float colorGreenSlopes;
    public float colorBlueSlopes;
    public static boolean fancyGrass = true;
    public static boolean field_27511_cfgGrassFix = true;
    public float factorTop;
    public float factorBottom;
    public float factorEast;
    public float factorWest;
    public float factorNorth;
    public float factorSouth;
    
	public static int whiteStoneBrickTexture = ModLoader.addOverride("/terrain.png", "/gc_images/whitestonebrick.png");
	public static int whiteStoneTexture = ModLoader.addOverride("/terrain.png", "/gc_images/whitestone.png");
	public static int whiteStoneBrickCracked = ModLoader.addOverride("/terrain.png", "/gc_images/whitestonebrickcracked.png");
	public static int whiteStoneBrickMossy = ModLoader.addOverride("/terrain.png", "/gc_images/whitestonebrickmossy.png");
	public static int grassStepTexture = ModLoader.addOverride("/terrain.png", "/gc_images/grassstep.png");
	public static int snowgrassStepTexture = ModLoader.addOverride("/terrain.png", "/gc_images/snowgrassstep.png");
	public static int glassStepTexture = ModLoader.addOverride("/terrain.png", "/gc_images/glassstep.png");
	public static int ironStepTexture = ModLoader.addOverride("/terrain.png", "/gc_images/ironstep.png");
	public static int goldStepTexture = ModLoader.addOverride("/terrain.png", "/gc_images/goldstep.png");
	public static int diamondStepTexture = ModLoader.addOverride("/terrain.png", "/gc_images/diamondstep.png");
	public static int logside = ModLoader.addOverride("/terrain.png", "/gc_images/logside.png");
	public static int glassHalfTexture = ModLoader.addOverride("/terrain.png", "/gc_images/glasshalf.png");
	public static int ironHalfTexture = ModLoader.addOverride("/terrain.png", "/gc_images/ironhalf.png");
	public static int goldHalfTexture = ModLoader.addOverride("/terrain.png", "/gc_images/goldhalf.png");
	public static int diamondHalfTexture = ModLoader.addOverride("/terrain.png", "/gc_images/diamondhalf.png");
	public static int stoneSlabHalfTexture = ModLoader.addOverride("/terrain.png", "/gc_images/slabhalf.png");
	
	public static int readableBookIcon = ModLoader.addOverride("/gui/items.png", "/gc_images/readablebook.png");
	public static int readableBookGoldenIcon = ModLoader.addOverride("/gui/items.png", "/gc_images/readablebookgolden.png");
	public static int readableBookDiamondIcon = ModLoader.addOverride("/gui/items.png", "/gc_images/readablebookdiamond.png");
	public static int readableBookObsidianIcon = ModLoader.addOverride("/gui/items.png", "/gc_images/readablebookobsidian.png");
	public static int readableBookLockedIcon = ModLoader.addOverride("/gui/items.png", "/gc_images/readablebooklocked.png");
	public static int readableBookGoldenLockedIcon = ModLoader.addOverride("/gui/items.png", "/gc_images/readablebookgoldenlocked.png");
	public static int readableBookDiamondLockedIcon = ModLoader.addOverride("/gui/items.png", "/gc_images/readablebookdiamondlocked.png");
	public static int limestoneTexture = ModLoader.addOverride("/terrain.png", "/gc_images/limestone.png");
	public static int limestoneItemTexture = ModLoader.addOverride("/gui/items.png", "/gc_images/limestoneitem.png");
	public static int slakedLimeTexture = ModLoader.addOverride("/gui/items.png", "/gc_images/slakedlime.png");
	
	public static final Block netherFenceGate = new BlockFenceGate(210, 224, Material.rock).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setBlockName("netherGate").setRequiresSelfNotify();
	
	public static Block blockGreenFlowers = new BlockGreenFlowers(213).setHardness(0.0F).setLightOpacity(0);
	public static Block blockWhiteStone = new Block(1001, whiteStoneTexture, Material.rock).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setBlockName("whiteStoneGC");
	public static Block blockWhiteStoneBrick = new Block(1002, whiteStoneBrickTexture, Material.rock).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setBlockName("whiteStoneBrick");
	public static Block blockLimestone = new Block(1003, limestoneTexture, Material.rock).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundGravelFootstep).setBlockName("limestone");
	public static Block blockWhiteStoneBrickCracked = new Block(1005, whiteStoneBrickCracked, Material.rock).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setBlockName("blockWhiteStoneBrickCracked");
	public static Block blockWhiteStoneBrickMossy = new Block(1004, whiteStoneBrickMossy, Material.rock).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundStoneFootstep).setBlockName("blockWhiteStoneBrickMossy");
	
	public static Block blockStepWhiteStoneBrick = new BlockGreenStep(1010, whiteStoneBrickTexture, blockWhiteStoneBrick, false).setBlockName("whiteStoneBrickStep");
	public static Block blockStepWhiteStone = new BlockGreenStep(1011, whiteStoneTexture, blockWhiteStone, false).setBlockName("whiteStoneStep");
	public static Block blockStepLog = new BlockGreenStepLog(1012, Material.wood, Block.wood, false);
	public static Block blockStepSnow = new BlockGreenStep(1013, Block.snow.blockIndexInTexture, Block.snow, false).setBlockName("snowStep");
	public static Block blockStepNetherrack = new BlockGreenStep(1014, Block.netherrack.blockIndexInTexture, Block.netherrack, false).setBlockName("netherrackStep");
	public static Block blockStepNetherBrick = new BlockGreenStep(1015, Block.netherBrick.blockIndexInTexture, Block.netherBrick, false).setBlockName("netherBrickStep");
	public static Block blockStepDirt = new BlockGreenStep(1016, Block.dirt.blockIndexInTexture, Block.dirt, false).setBlockName("dirtStep");
	public static Block blockStepGrass = new BlockGreenStepGrass(1017, Block.grass.blockIndexInTexture, Block.grass, false).setBlockName("grassStep");
	public static Block blockStepGlass = new BlockGreenStepTextured(1018, Block.glass.blockIndexInTexture, glassStepTexture, Block.glass, false).setBlockName("glassStep");
	public static Block blockStepObsidian = new BlockGreenStep(1019, Block.obsidian.blockIndexInTexture, Block.obsidian, false).setBlockName("obsidianStep");
	public static Block blockStepLapis = new BlockGreenStep(1020, Block.blockLapis.blockIndexInTexture, Block.blockLapis, false).setBlockName("lapisStep");
	public static Block blockStepMossyCobble = new BlockGreenStep(1021, Block.cobblestoneMossy.blockIndexInTexture, Block.cobblestoneMossy, false).setBlockName("mossyCobbleStep");
	public static Block blockStepMossyBrick = new BlockGreenStep(1022, 100, Block.stoneBrick, false).setBlockName("mossyBrickStep");
	public static Block blockStepCloth = new BlockStepCloth(1023, Material.cloth, false);
	public static Block blockStepIron = new BlockGreenStepTextured(1024, Block.blockSteel.blockIndexInTexture, ironStepTexture, Block.blockSteel, false).setBlockName("ironStep");
	public static Block blockStepGold = new BlockGreenStepTextured(1025, Block.blockGold.blockIndexInTexture, goldStepTexture, Block.blockGold, false).setBlockName("goldStep");
	public static Block blockStepDiamond = new BlockGreenStepTextured(1026, Block.blockDiamond.blockIndexInTexture, diamondStepTexture, Block.blockDiamond, false).setBlockName("diamondStep");
	public static Block blockStepStone = new BlockGreenStep(1027, Block.stone.blockIndexInTexture, Block.stone, false).setBlockName("stoneStep");
	public static Block blockStepWhiteStoneBrickMossy = new BlockGreenStep(1029, whiteStoneBrickMossy, blockWhiteStone, false).setBlockName("whiteStoneBrickMossyStep");
	
	public static Block blockStepWhiteStoneBrickUp = new BlockGreenStep(1030, whiteStoneBrickTexture, blockWhiteStoneBrick, true).setBlockName("whiteStoneBrickStep");
	public static Block blockStepWhiteStoneUp = new BlockGreenStep(1031, whiteStoneTexture, blockWhiteStone, true).setBlockName("whiteStoneStep");
	public static Block blockStepLogUp = new BlockGreenStepLog(1032, Material.wood, Block.wood, true);
	public static Block blockStepSnowUp = new BlockGreenStep(1033, Block.snow.blockIndexInTexture, Block.netherrack, true).setBlockName("snowStep");
	public static Block blockStepNetherrackUp = new BlockGreenStep(1034, Block.netherrack.blockIndexInTexture, Block.netherrack, true).setBlockName("netherrackStep");
	public static Block blockStepNetherBrickUp = new BlockGreenStep(1035, Block.netherBrick.blockIndexInTexture, Block.netherBrick, true).setBlockName("netherBrickStep");
	public static Block blockStepDirtUp = new BlockGreenStep(1036, Block.dirt.blockIndexInTexture, Block.dirt, true).setBlockName("dirtStep");
	public static Block blockStepGrassUp = new BlockGreenStepGrass(1037, Block.grass.blockIndexInTexture, Block.grass, true).setBlockName("grassStep");
	public static Block blockStepGlassUp = new BlockGreenStepTextured(1038, Block.glass.blockIndexInTexture, glassStepTexture, Block.glass, true).setBlockName("glassStep");
	public static Block blockStepObsidianUp = new BlockGreenStep(1039, Block.obsidian.blockIndexInTexture, Block.obsidian, true).setBlockName("obsidianStep");
	public static Block blockStepLapisUp = new BlockGreenStep(1040, Block.blockLapis.blockIndexInTexture, Block.blockLapis, true).setBlockName("lapisStep");
	public static Block blockStepMossyCobbleUp = new BlockGreenStep(1041, Block.cobblestoneMossy.blockIndexInTexture, Block.cobblestoneMossy, true).setBlockName("mossyCobbleStep");
	public static Block blockStepMossyBrickUp = new BlockGreenStep(1042, 100, Block.stoneBrick, true).setBlockName("mossyBrickStep");
	public static Block blockStepClothUp = new BlockStepCloth(1043, Material.cloth, true).setBlockName("stepCloth");
	public static Block blockStepIronUp = new BlockGreenStepTextured(1044, Block.blockSteel.blockIndexInTexture, ironStepTexture, Block.blockSteel, true).setBlockName("ironStep");
	public static Block blockStepGoldUp = new BlockGreenStepTextured(1045, Block.blockGold.blockIndexInTexture, goldStepTexture, Block.blockGold, true).setBlockName("goldStep");
	public static Block blockStepDiamondUp = new BlockGreenStepTextured(1046, Block.blockDiamond.blockIndexInTexture, diamondStepTexture, Block.blockDiamond, true).setBlockName("diamondStep");
	public static Block blockStepStoneUp = new BlockGreenStep(1047, Block.stone.blockIndexInTexture, Block.stone, true).setBlockName("stoneStep");
	public static Block blockStepUp = new BlockStepUp(1048).setBlockName("stoneSlab");
	public static Block blockStepWhiteStoneBrickMossyUp = new BlockGreenStep(1049, whiteStoneBrickMossy, blockWhiteStone, true).setBlockName("whiteStoneBrickMossyStep");
	
	public static Block blockStairsWhiteStoneBrick = new BlockStairs(1050, mod_gc.blockWhiteStoneBrick).setLightOpacity(0).setBlockName("whiteStoneBrickStairs");
	
	public static Block blockHalfBlockWhiteStoneBrick = new BlockHalfBlock(1070, blockWhiteStoneBrick).setBlockName("whiteStoneBrickStep");
	public static Block blockHalfBlockWhiteStoneBrickMossy = new BlockHalfBlock(1071, blockWhiteStoneBrickMossy).setBlockName("whiteStoneBrickMossyStep");
	public static Block blockHalfBlockWhiteStone = new BlockHalfBlock(1072, blockWhiteStone).setBlockName("whiteStoneStep");
	public static Block blockHalfBlockLogOak = new BlockHalfBlockLog(1073, Material.wood, 21, logside, 20).setBlockName("oakLogStep");
	public static Block blockHalfBlockLogRedWood = new BlockHalfBlockLog(1074, Material.wood, 21, logside, 116).setBlockName("redwoodLogStep");
	public static Block blockHalfBlockLogBirch = new BlockHalfBlockLog(1075, Material.wood, 21, logside, 117).setBlockName("birchLogStep");
	public static Block blockHalfBlockSnow = new BlockHalfBlock(1081, Block.snow).setBlockName("snowStep");
	public static Block blockHalfBlockNetherrack = new BlockHalfBlock(1082, Block.netherrack).setBlockName("netherrackStep");
	public static Block blockHalfBlockNetherBrick = new BlockHalfBlock(1083, Block.netherBrick).setBlockName("netherBrickStep");
	public static Block blockHalfBlockDirt = new BlockHalfBlock(1084, Block.dirt).setBlockName("dirtStep");
	public static Block blockHalfBlockGrass = new BlockHalfBlockGrass(1085, Block.grass).setBlockName("grassStep");
	public static Block blockHalfBlockGlass = new BlockHalfBlockTextured(1086, glassStepTexture, glassHalfTexture, Block.glass).setBlockName("glassStep");
	public static Block blockHalfBlockObsidian = new BlockHalfBlock(1087, Block.obsidian).setBlockName("obsidianStep");
	public static Block blockHalfBlockLapis = new BlockHalfBlock(1088, Block.blockLapis).setBlockName("lapisStep");
	public static Block blockHalfBlockMossyCobble = new BlockHalfBlock(1089, Block.cobblestoneMossy).setBlockName("mossyCobbleStep");
	public static Block blockHalfBlockMossyBrick = new BlockHalfBlock(1090, blockStepMossyBrickUp).setBlockName("mossyBrickStep");;
	public static Block blockHalfBlockCloth0 = new BlockHalfBlockCloth(1091, 0).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(0)]).toString());
	public static Block blockHalfBlockCloth1 = new BlockHalfBlockCloth(1092, 1).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(1)]).toString());
	public static Block blockHalfBlockCloth2 = new BlockHalfBlockCloth(1093, 2).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(2)]).toString());
	public static Block blockHalfBlockCloth3 = new BlockHalfBlockCloth(1094, 3).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(3)]).toString());
	public static Block blockHalfBlockCloth4 = new BlockHalfBlockCloth(1095, 4).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(4)]).toString());
	public static Block blockHalfBlockCloth5 = new BlockHalfBlockCloth(1096, 5).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(5)]).toString());
	public static Block blockHalfBlockCloth6 = new BlockHalfBlockCloth(1097, 6).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(6)]).toString());
	public static Block blockHalfBlockCloth7 = new BlockHalfBlockCloth(1098, 7).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(7)]).toString());
	public static Block blockHalfBlockCloth8 = new BlockHalfBlockCloth(1099, 8).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(8)]).toString());
	public static Block blockHalfBlockCloth9 = new BlockHalfBlockCloth(1100, 9).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(9)]).toString());
	public static Block blockHalfBlockCloth10 = new BlockHalfBlockCloth(1101, 10).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(10)]).toString());
	public static Block blockHalfBlockCloth11 = new BlockHalfBlockCloth(1102, 11).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(11)]).toString());
	public static Block blockHalfBlockCloth12 = new BlockHalfBlockCloth(1103, 12).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(12)]).toString());
	public static Block blockHalfBlockCloth13 = new BlockHalfBlockCloth(1104, 13).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(13)]).toString());
	public static Block blockHalfBlockCloth14 = new BlockHalfBlockCloth(1105, 14).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(14)]).toString());
	public static Block blockHalfBlockCloth15 = new BlockHalfBlockCloth(1106, 15).setBlockName((new StringBuilder()).append("clothStep").append(".").append(ItemDye.dyeColorNames[BlockCloth.getBlockFromDye(15)]).toString());
	public static Block blockHalfBlockIron = new BlockHalfBlockTextured(1107, ironStepTexture, ironHalfTexture, Block.blockSteel).setBlockName("ironStep");
	public static Block blockHalfBlockGold = new BlockHalfBlockTextured(1108, goldStepTexture, goldHalfTexture, Block.blockGold).setBlockName("goldStep");
	public static Block blockHalfBlockDiamond = new BlockHalfBlockTextured(1109, diamondStepTexture, diamondHalfTexture, Block.blockDiamond).setBlockName("diamondStep");
	public static Block blockHalfBlockStone = new BlockHalfBlock(1111, Block.stone).setBlockName("stoneStep");
	public static Block blockHalfBlockSlabs = new BlockHalfBlockSlabs(1112, Block.stairSingle, 0).setBlockName("stoneSlab.stone");
	public static Block blockHalfBlockSlabsSandStone = new BlockHalfBlockSlabs(1113, Block.stairSingle, 1).setBlockName("stoneSlab.sand");
	public static Block blockHalfBlockSlabsWood = new BlockHalfBlockSlabs(1114, Block.stairSingle, 2).setBlockName("stoneSlab.wood");
	public static Block blockHalfBlockSlabsCobble = new BlockHalfBlockSlabs(1115, Block.stairSingle, 3).setBlockName("stoneSlab.cobble");
	public static Block blockHalfBlockSlabsBrick = new BlockHalfBlockSlabs(1116, Block.stairSingle, 4).setBlockName("stoneSlab.brick");
	public static Block blockHalfBlockSlabsStoneBrick = new BlockHalfBlockSlabs(1117, Block.stairSingle, 5).setBlockName("stoneSlab.smoothStoneBrick");
	
	//public static Block blockPalmLog = new BlockPalmLog(1200).setHardness(0.5F).setBlockName("palmLog");
	//public static Block blockPalmLeaves = new BlockPalmLeaves(1201).setHardness(0.2F).setBlockName("palmLeaves").setLightOpacity(0);
	//public static Block blockBanana = new BlockBanana(1201).setHardness(1.0F).setBlockName("banana");
	//public static Block blockAppleTreeLeaves = new BlockAppleTreeLeaves(219, BlockAppleTreeLeaves.leaves);
	//public static Block blockPalmSakuraAppleSapling = new BlockPalmSakuraAppleSapling(215, BlockPalmSakuraAppleSapling.palm).setHardness(0.0F).setBlockName("sapling2").setLightOpacity(0);
	//public static Block cocoaSaplingBlock = new BlockCocoaSapling(216, cocoaSaplingTexture).setHardness(0.0F).setBlockName("cocoaSapling");
	//public static Block cocoaBlock = new BlockCocoa(222, cocoaBlockTexture).setHardness(1.0F).setBlockName("cocoaBlock");
	
	//public static Block bananaCake = new BlockBananaCake(224, BlockBananaCake.cake1).setHardness(0.5F).setStepSound(Block.soundClothFootstep).setBlockName("bananaCake");

	//public static Block blockWhiteBrickFence = new BlockFence(1060, whiteStoneTexture, Material.rock).setHardness(Block.fence.blockHardness);
	public static Block blockGift = new BlockGift(1110, Block.cloth).setBlockName("blockGift");
	public static Block blockGiftNY = new BlockGiftNY(1120, Block.cloth).setBlockName("blockGiftNY");
	
	public static Item readableBook = new ItemReadableBook(3000 - 256).setIconIndex(readableBookIcon).setItemName("readableBook").setMaxStackSize(1);
	//public static Item CocoaFruit = new Item(3001 - 256).setIconIndex(cocoaFruitTexture).setItemName("cocoaFruit").setMaxStackSize(8);
	//public static Item banana = new ItemFood((3002 - 256), 2, 0.1F, false).setIconIndex(bananaItemTexture).setItemName("bananaItem").setMaxStackSize(8);	
	//public static Item bananaGreen = new ItemFood((3003 - 256), 1, 0.1F, false).setIconIndex(bananaGreenItemTexture).setItemName("bananaGreenItem").setMaxStackSize(8);
	//public static Item bananaCakeItem = new Item(3004 - 256)
	public static Item readableBookGolden = new ItemReadableBook(3005 - 256).setIconIndex(readableBookGoldenIcon).setItemName("readableBookGolden").setMaxStackSize(1);
	public static Item readableBookDiamond = new ItemReadableBook(3006 - 256).setIconIndex(readableBookDiamondIcon).setItemName("readableBookDiamond").setMaxStackSize(1);
	public static Item readableBookObsidian = new ItemReadableBook(3007 - 256).setIconIndex(readableBookObsidianIcon).setItemName("readableBookobsg").setMaxStackSize(1);
	public static Item readableBookLocked = new ItemReadableBook(3008 - 256).setIconIndex(readableBookLockedIcon).setItemName("readableBookLocked").setMaxStackSize(1);
	public static Item readableBookGoldenLocked = new ItemReadableBook(3009 - 256).setIconIndex(readableBookGoldenLockedIcon).setItemName("readableBookGoldenLocked").setMaxStackSize(1);
	public static Item readableBookDiamondLocked = new ItemReadableBook(3010 - 256).setIconIndex(readableBookDiamondLockedIcon).setItemName("readableBookDiamondLocked").setMaxStackSize(1);
	public static Item limestoneItem = new Item(3020 - 256).setIconIndex(limestoneItemTexture).setItemName("limestoneItem").setMaxStackSize(64);
	public static Item slakedLime = new Item(3021 - 256).setIconIndex(slakedLimeTexture).setItemName("slakedlime").setMaxStackSize(64);
	
	// FOR FLUFFY 
	/*
	public static int testblock1 = ModLoader.addOverride("/terrain.png", "/gc_images/block1.png");
	public static int testblock2 = ModLoader.addOverride("/terrain.png", "/gc_images/block2.png");
	public static int testblock3 = ModLoader.addOverride("/terrain.png", "/gc_images/block3.png");
	public static int testblock4 = ModLoader.addOverride("/terrain.png", "/gc_images/block4.png");
	public static int testblock5 = ModLoader.addOverride("/terrain.png", "/gc_images/block5.png");
	public static int testblocklight1 = ModLoader.addOverride("/terrain.png", "/gc_images/blocklight0.3.png");
	public static int testblocklight2 = ModLoader.addOverride("/terrain.png", "/gc_images/blocklight0.5.png");
	public static int testblocklight3 = ModLoader.addOverride("/terrain.png", "/gc_images/blocklight1.0.png");
	
	public static Block blocktest1 = new Block(2901, testblock1, Material.rock).setHardness(1.0F);
	public static Block blocktest2 = new Block(2902, testblock2, Material.rock).setHardness(1.0F);
	public static Block blocktest3 = new Block(2903, testblock3, Material.rock).setHardness(1.0F);
	public static Block blocktest4 = new Block(2904, testblock4, Material.rock).setHardness(1.0F);
	public static Block blocktestlight1 = new Block(2905, testblock1, Material.rock).setHardness(1.0F).setLightValue(0.3F);
	public static Block blocktestlight2 = new Block(2906, testblock1, Material.rock).setHardness(1.0F).setLightValue(0.5F);
	public static Block blocktestlight3 = new Block(2907, testblock1, Material.rock).setHardness(1.0F).setLightValue(1.0F);
	public static Block blocktesthalf = new BlockHalfBlock(2908, blocktest1);
	*/
	public mod_gc() {
        Item.itemsList[blockGreenFlowers.blockID] = new ItemGreenFlowers(blockGreenFlowers.blockID - 256);

        ModLoader.RegisterBlock(blockLimestone);
        ModLoader.RegisterBlock(blockWhiteStone);
        ModLoader.RegisterBlock(blockWhiteStoneBrick);
        ModLoader.RegisterBlock(blockWhiteStoneBrickCracked);
        ModLoader.RegisterBlock(blockWhiteStoneBrickMossy);
		ModLoader.RegisterBlock(netherFenceGate);
		ModLoader.RegisterBlock(blockStairsWhiteStoneBrick);
		
		ModLoader.RegisterBlock(blockStepWhiteStoneBrick);
		ModLoader.RegisterBlock(blockStepWhiteStone);
		Item.itemsList[blockStepLog.blockID] = new ItemGreenStepLog(blockStepLog.blockID - 256);
		ModLoader.RegisterBlock(blockStepSnow);
		ModLoader.RegisterBlock(blockStepNetherrack);
		ModLoader.RegisterBlock(blockStepNetherBrick);
		ModLoader.RegisterBlock(blockStepDirt);
		ModLoader.RegisterBlock(blockStepGrass);
		ModLoader.RegisterBlock(blockStepGlass);
		ModLoader.RegisterBlock(blockStepObsidian);
		ModLoader.RegisterBlock(blockStepLapis);
		ModLoader.RegisterBlock(blockStepMossyCobble);
		ModLoader.RegisterBlock(blockStepMossyBrick);
        Item.itemsList[blockStepCloth.blockID] = new ItemStepCloth(blockStepCloth.blockID - 256);
		ModLoader.RegisterBlock(blockStepIron);
		ModLoader.RegisterBlock(blockStepGold);
		ModLoader.RegisterBlock(blockStepDiamond);
		ModLoader.RegisterBlock(blockStepStone);
		ModLoader.RegisterBlock(blockStepWhiteStoneBrickMossy);
        
        Item.itemsList[blockStepWhiteStoneBrickUp.blockID] = new ItemGreenStepUp(blockStepWhiteStoneBrickUp.blockID - 256);
        Item.itemsList[blockStepWhiteStoneUp.blockID] = new ItemGreenStepUp(blockStepWhiteStoneUp.blockID - 256);
		Item.itemsList[blockStepLogUp.blockID] = new ItemGreenStepLog(blockStepLogUp.blockID - 256);
		Item.itemsList[blockStepSnowUp.blockID] = new ItemGreenStepUp(blockStepSnowUp.blockID - 256);
		Item.itemsList[blockStepNetherrackUp.blockID] = new ItemGreenStepUp(blockStepNetherrackUp.blockID - 256);
		Item.itemsList[blockStepNetherBrickUp.blockID] = new ItemGreenStepUp(blockStepNetherBrickUp.blockID - 256);
		Item.itemsList[blockStepDirtUp.blockID] = new ItemGreenStepUp(blockStepDirtUp.blockID - 256);
		Item.itemsList[blockStepGrassUp.blockID] = new ItemGreenStepUp(blockStepGrassUp.blockID - 256);
		Item.itemsList[blockStepGlassUp.blockID] = new ItemGreenStepUp(blockStepGlassUp.blockID - 256);
		Item.itemsList[blockStepObsidianUp.blockID] = new ItemGreenStepUp(blockStepObsidianUp.blockID - 256);
		Item.itemsList[blockStepLapisUp.blockID] = new ItemGreenStepUp(blockStepLapisUp.blockID - 256);
		Item.itemsList[blockStepMossyCobbleUp.blockID] = new ItemGreenStepUp(blockStepMossyCobbleUp.blockID - 256);
		Item.itemsList[blockStepMossyBrickUp.blockID] = new ItemGreenStepUp(blockStepMossyBrickUp.blockID - 256);
		Item.itemsList[blockStepClothUp.blockID] = new ItemStepCloth(blockStepClothUp.blockID - 256);
		Item.itemsList[blockStepIronUp.blockID] = new ItemGreenStepUp(blockStepIronUp.blockID - 256);
		Item.itemsList[blockStepGoldUp.blockID] = new ItemGreenStepUp(blockStepGoldUp.blockID - 256);
		Item.itemsList[blockStepDiamondUp.blockID] = new ItemGreenStepUp(blockStepDiamondUp.blockID - 256);
		Item.itemsList[blockStepStoneUp.blockID] = new ItemGreenStepUp(blockStepStoneUp.blockID - 256);
		Item.itemsList[blockStepUp.blockID] = new ItemSlabUp(blockStepUp.blockID - 256);
		Item.itemsList[blockStepWhiteStoneBrickMossyUp.blockID] = new ItemGreenStepUp(blockStepWhiteStoneBrickMossyUp.blockID - 256);
		
		//ModLoader.RegisterBlock(blockPalmLog);
		//ModLoader.RegisterBlock(blockWhiteBrickFence);
		
		//Item.itemsList[blockPalmLeaves.blockID] = new ItemPalmLeaves(blockPalmLeaves.blockID - 256)
		
		Item.itemsList[blockHalfBlockWhiteStoneBrick.blockID] = new ItemHalfBlock(blockHalfBlockWhiteStoneBrick.blockID - 256);
		Item.itemsList[blockHalfBlockWhiteStoneBrickMossy.blockID] = new ItemHalfBlock(blockHalfBlockWhiteStoneBrickMossy.blockID - 256);
		Item.itemsList[blockHalfBlockWhiteStone.blockID] = new ItemHalfBlock(blockHalfBlockWhiteStone.blockID - 256);
		Item.itemsList[blockHalfBlockLogOak.blockID] = new ItemHalfBlock(blockHalfBlockLogOak.blockID - 256);
		Item.itemsList[blockHalfBlockLogRedWood.blockID] = new ItemHalfBlock(blockHalfBlockLogRedWood.blockID - 256);
		Item.itemsList[blockHalfBlockLogBirch.blockID] = new ItemHalfBlock(blockHalfBlockLogBirch.blockID - 256);
		Item.itemsList[blockHalfBlockSnow.blockID] = new ItemHalfBlock(blockHalfBlockSnow.blockID - 256);
		Item.itemsList[blockHalfBlockNetherrack.blockID] = new ItemHalfBlock(blockHalfBlockNetherrack.blockID - 256);
		Item.itemsList[blockHalfBlockNetherBrick.blockID] = new ItemHalfBlock(blockHalfBlockNetherBrick.blockID - 256);
		Item.itemsList[blockHalfBlockDirt.blockID] = new ItemHalfBlock(blockHalfBlockDirt.blockID - 256);
		Item.itemsList[blockHalfBlockGrass.blockID] = new ItemHalfBlock(blockHalfBlockGrass.blockID - 256);
		Item.itemsList[blockHalfBlockGlass.blockID] = new ItemHalfBlock(blockHalfBlockGlass.blockID - 256);
		Item.itemsList[blockHalfBlockObsidian.blockID] = new ItemHalfBlock(blockHalfBlockObsidian.blockID - 256);
		Item.itemsList[blockHalfBlockLapis.blockID] = new ItemHalfBlock(blockHalfBlockLapis.blockID - 256);
		Item.itemsList[blockHalfBlockMossyCobble.blockID] = new ItemHalfBlock(blockHalfBlockMossyCobble.blockID - 256);
		Item.itemsList[blockHalfBlockMossyBrick.blockID] = new ItemHalfBlock(blockHalfBlockMossyBrick.blockID - 256);
		Item.itemsList[blockHalfBlockCloth0.blockID] = new ItemHalfBlock(blockHalfBlockCloth0.blockID - 256);
		Item.itemsList[blockHalfBlockCloth1.blockID] = new ItemHalfBlock(blockHalfBlockCloth1.blockID - 256);
		Item.itemsList[blockHalfBlockCloth2.blockID] = new ItemHalfBlock(blockHalfBlockCloth2.blockID - 256);
		Item.itemsList[blockHalfBlockCloth3.blockID] = new ItemHalfBlock(blockHalfBlockCloth3.blockID - 256);
		Item.itemsList[blockHalfBlockCloth4.blockID] = new ItemHalfBlock(blockHalfBlockCloth4.blockID - 256);
		Item.itemsList[blockHalfBlockCloth5.blockID] = new ItemHalfBlock(blockHalfBlockCloth5.blockID - 256);
		Item.itemsList[blockHalfBlockCloth6.blockID] = new ItemHalfBlock(blockHalfBlockCloth6.blockID - 256);
		Item.itemsList[blockHalfBlockCloth7.blockID] = new ItemHalfBlock(blockHalfBlockCloth7.blockID - 256);
		Item.itemsList[blockHalfBlockCloth8.blockID] = new ItemHalfBlock(blockHalfBlockCloth8.blockID - 256);
		Item.itemsList[blockHalfBlockCloth9.blockID] = new ItemHalfBlock(blockHalfBlockCloth9.blockID - 256);
		Item.itemsList[blockHalfBlockCloth10.blockID] = new ItemHalfBlock(blockHalfBlockCloth10.blockID - 256);
		Item.itemsList[blockHalfBlockCloth11.blockID] = new ItemHalfBlock(blockHalfBlockCloth11.blockID - 256);
		Item.itemsList[blockHalfBlockCloth12.blockID] = new ItemHalfBlock(blockHalfBlockCloth12.blockID - 256);
		Item.itemsList[blockHalfBlockCloth13.blockID] = new ItemHalfBlock(blockHalfBlockCloth13.blockID - 256);
		Item.itemsList[blockHalfBlockCloth14.blockID] = new ItemHalfBlock(blockHalfBlockCloth14.blockID - 256);
		Item.itemsList[blockHalfBlockCloth15.blockID] = new ItemHalfBlock(blockHalfBlockCloth15.blockID - 256);
		Item.itemsList[blockHalfBlockIron.blockID] = new ItemHalfBlock(blockHalfBlockIron.blockID - 256);
		Item.itemsList[blockHalfBlockGold.blockID] = new ItemHalfBlock(blockHalfBlockGold.blockID - 256);
		Item.itemsList[blockHalfBlockDiamond.blockID] = new ItemHalfBlock(blockHalfBlockDiamond.blockID - 256);
		Item.itemsList[blockHalfBlockStone.blockID] = new ItemHalfBlock(blockHalfBlockStone.blockID - 256);
		Item.itemsList[blockHalfBlockSlabs.blockID] = new ItemHalfBlock(blockHalfBlockSlabs.blockID - 256);
		Item.itemsList[blockHalfBlockSlabsSandStone.blockID] = new ItemHalfBlock(blockHalfBlockSlabsSandStone.blockID - 256);
		Item.itemsList[blockHalfBlockSlabsWood.blockID] = new ItemHalfBlock(blockHalfBlockSlabsWood.blockID - 256);
		Item.itemsList[blockHalfBlockSlabsCobble.blockID] = new ItemHalfBlock(blockHalfBlockSlabsCobble.blockID - 256);
		Item.itemsList[blockHalfBlockSlabsBrick.blockID] = new ItemHalfBlock(blockHalfBlockSlabsBrick.blockID - 256);
		Item.itemsList[blockHalfBlockSlabsStoneBrick.blockID] = new ItemHalfBlock(blockHalfBlockSlabsStoneBrick.blockID - 256);
		Item.itemsList[blockHalfBlockSlabsStoneBrick.blockID] = new ItemHalfBlock(blockHalfBlockSlabsStoneBrick.blockID - 256);
		
		ModLoader.RegisterBlock(blockGift);
		ModLoader.RegisterBlock(blockGiftNY);
		Item.itemsList[blockGiftNY.blockID].setMaxStackSize(1);
		//ModLoader.RegisterBlock(blockAppleTreeLeaves);
		//ModLoader.RegisterBlock(cocoaSaplingBlock);
		//ModLoader.RegisterBlock(cocoaBlock);
		//ModLoader.RegisterBlock(blockBanana);
//		ModLoader.RegisterBlock(bananaCake);
		
		// FOR FLUFFY
		/*
		ModLoader.RegisterBlock(blocktest1);
		ModLoader.RegisterBlock(blocktest2);
		ModLoader.RegisterBlock(blocktest3);
		ModLoader.RegisterBlock(blocktest4);
		ModLoader.RegisterBlock(blocktestlight1);
		ModLoader.RegisterBlock(blocktestlight2);
		ModLoader.RegisterBlock(blocktestlight3);
		ModLoader.RegisterBlock(blocktesthalf);
		*/
        SlopesRenderID = ModLoader.getUniqueBlockModelID(this, true);
	}
//	public void AddRecipes() {
//		ModLoader.AddRecipe(new ItemStack);
//	}

	public boolean RenderWorldBlock(RenderBlocks renderblocks, IBlockAccess iblockaccess, int i, int j, int k, Block block, int l) {
        if(l == SlopesRenderID)
            return renderBlockSlopes(block, i, j, k, renderblocks, iblockaccess);
	}
	
    public boolean renderBlockSlopes(Block block, int i, int j, int k, RenderBlocks renderblocks, IBlockAccess iblockaccess)
    {
        int l = iblockaccess.getBlockMetadata(i, j, k);
        int i1 = block.colorMultiplier(iblockaccess, i, j, k);
        float f = (float)(i1 >> 16 & 0xff) / 255F;
        float f1 = (float)(i1 >> 8 & 0xff) / 255F;
        float f2 = (float)(i1 & 0xff) / 255F;
        if(Minecraft.isAmbientOcclusionEnabled())
        {
            return renderSlopesBlockWithAmbientOcclusion(block, i, j, k, f, f1, f2, l, renderblocks, iblockaccess);
        } else
        {
            return renderSlopesBlockWithColorMultiplier(block, i, j, k, f, f1, f2, l, renderblocks, iblockaccess);
        }
    }
	
    public boolean renderSlopesBlockWithAmbientOcclusion(Block block, int i, int j, int k, float f, float f1, float f2, 
            int l, RenderBlocks renderblocks, IBlockAccess iblockaccess)
    {
        enableAO = true;
        boolean flag = false;
        boolean flag1 = true;
        boolean flag2 = true;
        boolean flag3 = true;
        boolean flag4 = true;
        boolean flag5 = true;
        boolean flag6 = true;
        aoLightValueThis = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k);
        aoLightValueXNeg = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j, k);
        aoLightValueYNeg = block.getAmbientOcclusionLightValue(iblockaccess, i, j - 1, k);
        aoLightValueZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k - 1);
        aoLightValueXPos = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j, k);
        aoLightValueYPos = block.getAmbientOcclusionLightValue(iblockaccess, i, j + 1, k);
        aoLightValueZPos = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k + 1);
        aoLightValueXPosYPos = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j + 1, k);
        aoLightValueXPosYNeg = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j - 1, k);
        aoLightValueXPosZPos = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j, k + 1);
        aoLightValueXPosZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j, k - 1);
        aoLightValueXNegYPos = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j + 1, k);
        aoLightValueXNegYNeg = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j - 1, k);
        aoLightValueXNegZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j, k - 1);
        aoLightValueXNegZPos = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j, k + 1);
        aoLightValueYPosZPos = block.getAmbientOcclusionLightValue(iblockaccess, i, j + 1, k + 1);
        aoLightValueYPosZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i, j + 1, k - 1);
        aoLightValueYNegZPos = block.getAmbientOcclusionLightValue(iblockaccess, i, j - 1, k + 1);
        aoLightValueYNegZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i, j - 1, k - 1);
        aoLightValueXPosYPosZPos = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j + 1, k + 1);
        aoLightValueXPosYNegZPos = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j - 1, k + 1);
        aoLightValueXPosYPosZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j + 1, k - 1);
        aoLightValueXPosYNegZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j - 1, k - 1);
        aoLightValueXNegYPosZPos = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j + 1, k + 1);
        aoLightValueXNegYNegZPos = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j - 1, k + 1);
        aoLightValueXNegYPosZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j + 1, k - 1);
        aoLightValueXNegYNegZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j - 1, k - 1);
        if(block.blockIndexInTexture == 3)
        {
            flag1 = flag3 = flag4 = flag5 = flag6 = false;
        }
        float f3;
        float f4;
        float f5;
        float f6;
        if(field_22352_G > 0)
        {
            f3 = (aoLightValueXNegYNegZPos + aoLightValueXNegYNeg + aoLightValueYNegZPos + aoLightValueYNeg) / 4F;
            f6 = (aoLightValueYNegZPos + aoLightValueYNeg + aoLightValueXPosYNegZPos + aoLightValueXPosYNeg) / 4F;
            f5 = (aoLightValueYNeg + aoLightValueYNegZNeg + aoLightValueXPosYNeg + aoLightValueXPosYNegZNeg) / 4F;
            f4 = (aoLightValueXNegYNeg + aoLightValueXNegYNegZNeg + aoLightValueYNeg + aoLightValueYNegZNeg) / 4F;
        } else
        {
            f3 = f4 = f5 = f6 = aoLightValueYNeg;
        }
        colorRedTopLeft_BottomFace = colorRedBottomLeft_BottomFace = colorRedBottomRight_BottomFace = colorRedTopRight_BottomFace = (flag1 ? f : 1.0F) * 0.5F;
        colorGreenTopLeft_BottomFace = colorGreenBottomLeft_BottomFace = colorGreenBottomRight_BottomFace = colorGreenTopRight_BottomFace = (flag1 ? f1 : 1.0F) * 0.5F;
        colorBlueTopLeft_BottomFace = colorBlueBottomLeft_BottomFace = colorBlueBottomRight_BottomFace = colorBlueTopRight_BottomFace = (flag1 ? f2 : 1.0F) * 0.5F;
        colorRedTopLeft_BottomFace *= f3;
        colorGreenTopLeft_BottomFace *= f3;
        colorBlueTopLeft_BottomFace *= f3;
        colorRedBottomLeft_BottomFace *= f4;
        colorGreenBottomLeft_BottomFace *= f4;
        colorBlueBottomLeft_BottomFace *= f4;
        colorRedBottomRight_BottomFace *= f5;
        colorGreenBottomRight_BottomFace *= f5;
        colorBlueBottomRight_BottomFace *= f5;
        colorRedTopRight_BottomFace *= f6;
        colorGreenTopRight_BottomFace *= f6;
        colorBlueTopRight_BottomFace *= f6;
        float f7;
        float f8;
        float f9;
        float f10;
        if(field_22352_G > 0)
        {
            f10 = (aoLightValueXNegYPosZPos + aoLightValueXNegYPos + aoLightValueYPosZPos + aoLightValueYPos) / 4F;
            f7 = (aoLightValueYPosZPos + aoLightValueYPos + aoLightValueXPosYPosZPos + aoLightValueXPosYPos) / 4F;
            f8 = (aoLightValueYPos + aoLightValueYPosZNeg + aoLightValueXPosYPos + aoLightValueXPosYPosZNeg) / 4F;
            f9 = (aoLightValueXNegYPos + aoLightValueXNegYPosZNeg + aoLightValueYPos + aoLightValueYPosZNeg) / 4F;
        } else
        {
            f7 = f8 = f9 = f10 = aoLightValueYPos;
        }
        colorRedTopLeft_TopFace = colorRedBottomLeft_TopFace = colorRedBottomRight_TopFace = colorRedTopRight_TopFace = flag2 ? f : 1.0F;
        colorGreenTopLeft_TopFace = colorGreenBottomLeft_TopFace = colorGreenBottomRight_TopFace = colorGreenTopRight_TopFace = flag2 ? f1 : 1.0F;
        colorBlueTopLeft_TopFace = colorBlueBottomLeft_TopFace = colorBlueBottomRight_TopFace = colorBlueTopRight_TopFace = flag2 ? f2 : 1.0F;
        colorRedTopLeft_TopFace *= f7;
        colorGreenTopLeft_TopFace *= f7;
        colorBlueTopLeft_TopFace *= f7;
        colorRedBottomLeft_TopFace *= f8;
        colorGreenBottomLeft_TopFace *= f8;
        colorBlueBottomLeft_TopFace *= f8;
        colorRedBottomRight_TopFace *= f9;
        colorGreenBottomRight_TopFace *= f9;
        colorBlueBottomRight_TopFace *= f9;
        colorRedTopRight_TopFace *= f10;
        colorGreenTopRight_TopFace *= f10;
        colorBlueTopRight_TopFace *= f10;
        float f11;
        float f12;
        float f13;
        float f14;
        if(field_22352_G > 0)
        {
            f11 = (aoLightValueXNegZNeg + aoLightValueXNegYPosZNeg + aoLightValueZNeg + aoLightValueYPosZNeg) / 4F;
            f12 = (aoLightValueZNeg + aoLightValueYPosZNeg + aoLightValueXPosZNeg + aoLightValueXPosYPosZNeg) / 4F;
            f13 = (aoLightValueYNegZNeg + aoLightValueZNeg + aoLightValueXPosYNegZNeg + aoLightValueXPosZNeg) / 4F;
            f14 = (aoLightValueXNegYNegZNeg + aoLightValueXNegZNeg + aoLightValueYNegZNeg + aoLightValueZNeg) / 4F;
        } else
        {
            f11 = f12 = f13 = f14 = aoLightValueZNeg;
        }
        colorRedTopLeft_EastFace = colorRedBottomLeft_EastFace = colorRedBottomRight_EastFace = colorRedTopRight_EastFace = (flag3 ? f : 1.0F) * 0.8F;
        colorGreenTopLeft_EastFace = colorGreenBottomLeft_EastFace = colorGreenBottomRight_EastFace = colorGreenTopRight_EastFace = (flag3 ? f1 : 1.0F) * 0.8F;
        colorBlueTopLeft_EastFace = colorBlueBottomLeft_EastFace = colorBlueBottomRight_EastFace = colorBlueTopRight_EastFace = (flag3 ? f2 : 1.0F) * 0.8F;
        colorRedTopLeft_EastFace *= f11;
        colorGreenTopLeft_EastFace *= f11;
        colorBlueTopLeft_EastFace *= f11;
        colorRedBottomLeft_EastFace *= f12;
        colorGreenBottomLeft_EastFace *= f12;
        colorBlueBottomLeft_EastFace *= f12;
        colorRedBottomRight_EastFace *= f13;
        colorGreenBottomRight_EastFace *= f13;
        colorBlueBottomRight_EastFace *= f13;
        colorRedTopRight_EastFace *= f14;
        colorGreenTopRight_EastFace *= f14;
        colorBlueTopRight_EastFace *= f14;
        int i1 = block.getBlockTexture(iblockaccess, i, j, k, 2);
        float f15;
        float f16;
        float f17;
        float f18;
        if(field_22352_G > 0)
        {
            f15 = (aoLightValueXNegZPos + aoLightValueXNegYPosZPos + aoLightValueZPos + aoLightValueYPosZPos) / 4F;
            f18 = (aoLightValueZPos + aoLightValueYPosZPos + aoLightValueXPosZPos + aoLightValueXPosYPosZPos) / 4F;
            f17 = (aoLightValueYNegZPos + aoLightValueZPos + aoLightValueXPosYNegZPos + aoLightValueXPosZPos) / 4F;
            f16 = (aoLightValueXNegYNegZPos + aoLightValueXNegZPos + aoLightValueYNegZPos + aoLightValueZPos) / 4F;
        } else
        {
            f15 = f16 = f17 = f18 = aoLightValueZPos;
        }
        colorRedTopLeft_WestFace = colorRedBottomLeft_WestFace = colorRedBottomRight_WestFace = colorRedTopRight_WestFace = (flag4 ? f : 1.0F) * 0.8F;
        colorGreenTopLeft_WestFace = colorGreenBottomLeft_WestFace = colorGreenBottomRight_WestFace = colorGreenTopRight_WestFace = (flag4 ? f1 : 1.0F) * 0.8F;
        colorBlueTopLeft_WestFace = colorBlueBottomLeft_WestFace = colorBlueBottomRight_WestFace = colorBlueTopRight_WestFace = (flag4 ? f2 : 1.0F) * 0.8F;
        colorRedTopLeft_WestFace *= f15;
        colorGreenTopLeft_WestFace *= f15;
        colorBlueTopLeft_WestFace *= f15;
        colorRedBottomLeft_WestFace *= f16;
        colorGreenBottomLeft_WestFace *= f16;
        colorBlueBottomLeft_WestFace *= f16;
        colorRedBottomRight_WestFace *= f17;
        colorGreenBottomRight_WestFace *= f17;
        colorBlueBottomRight_WestFace *= f17;
        colorRedTopRight_WestFace *= f18;
        colorGreenTopRight_WestFace *= f18;
        colorBlueTopRight_WestFace *= f18;
        int j1 = block.getBlockTexture(iblockaccess, i, j, k, 3);
        float f19;
        float f20;
        float f21;
        float f22;
        if(field_22352_G > 0)
        {
            f22 = (aoLightValueXNegYNeg + aoLightValueXNegYNegZPos + aoLightValueXNeg + aoLightValueXNegZPos) / 4F;
            f19 = (aoLightValueXNeg + aoLightValueXNegZPos + aoLightValueXNegYPos + aoLightValueXNegYPosZPos) / 4F;
            f20 = (aoLightValueXNegZNeg + aoLightValueXNeg + aoLightValueXNegYPosZNeg + aoLightValueXNegYPos) / 4F;
            f21 = (aoLightValueXNegYNegZNeg + aoLightValueXNegYNeg + aoLightValueXNegZNeg + aoLightValueXNeg) / 4F;
        } else
        {
            f19 = f20 = f21 = f22 = aoLightValueXNeg;
        }
        colorRedTopLeft_NorthFace = colorRedBottomLeft_NorthFace = colorRedBottomRight_NorthFace = colorRedTopRight_NorthFace = (flag5 ? f : 1.0F) * 0.6F;
        colorGreenTopLeft_NorthFace = colorGreenBottomLeft_NorthFace = colorGreenBottomRight_NorthFace = colorGreenTopRight_NorthFace = (flag5 ? f1 : 1.0F) * 0.6F;
        colorBlueTopLeft_NorthFace = colorBlueBottomLeft_NorthFace = colorBlueBottomRight_NorthFace = colorBlueTopRight_NorthFace = (flag5 ? f2 : 1.0F) * 0.6F;
        colorRedTopLeft_NorthFace *= f19;
        colorGreenTopLeft_NorthFace *= f19;
        colorBlueTopLeft_NorthFace *= f19;
        colorRedBottomLeft_NorthFace *= f20;
        colorGreenBottomLeft_NorthFace *= f20;
        colorBlueBottomLeft_NorthFace *= f20;
        colorRedBottomRight_NorthFace *= f21;
        colorGreenBottomRight_NorthFace *= f21;
        colorBlueBottomRight_NorthFace *= f21;
        colorRedTopRight_NorthFace *= f22;
        colorGreenTopRight_NorthFace *= f22;
        colorBlueTopRight_NorthFace *= f22;
        int k1 = block.getBlockTexture(iblockaccess, i, j, k, 4);
        float f23;
        float f24;
        float f25;
        float f26;
        if(field_22352_G > 0)
        {
            f23 = (aoLightValueXPosYNeg + aoLightValueXPosYNegZPos + aoLightValueXPos + aoLightValueXPosZPos) / 4F;
            f26 = (aoLightValueXPos + aoLightValueXPosZPos + aoLightValueXPosYPos + aoLightValueXPosYPosZPos) / 4F;
            f25 = (aoLightValueXPosZNeg + aoLightValueXPos + aoLightValueXPosYPosZNeg + aoLightValueXPosYPos) / 4F;
            f24 = (aoLightValueXPosYNegZNeg + aoLightValueXPosYNeg + aoLightValueXPosZNeg + aoLightValueXPos) / 4F;
        } else
        {
            f23 = f24 = f25 = f26 = aoLightValueXPos;
        }
        colorRedTopLeft_SouthFace = colorRedBottomLeft_SouthFace = colorRedBottomRight_SouthFace = colorRedTopRight_SouthFace = (flag6 ? f : 1.0F) * 0.6F;
        colorGreenTopLeft_SouthFace = colorGreenBottomLeft_SouthFace = colorGreenBottomRight_SouthFace = colorGreenTopRight_SouthFace = (flag6 ? f1 : 1.0F) * 0.6F;
        colorBlueTopLeft_SouthFace = colorBlueBottomLeft_SouthFace = colorBlueBottomRight_SouthFace = colorBlueTopRight_SouthFace = (flag6 ? f2 : 1.0F) * 0.6F;
        colorRedTopLeft_SouthFace *= f23;
        colorGreenTopLeft_SouthFace *= f23;
        colorBlueTopLeft_SouthFace *= f23;
        colorRedBottomLeft_SouthFace *= f24;
        colorGreenBottomLeft_SouthFace *= f24;
        colorBlueBottomLeft_SouthFace *= f24;
        colorRedBottomRight_SouthFace *= f25;
        colorGreenBottomRight_SouthFace *= f25;
        colorBlueBottomRight_SouthFace *= f25;
        colorRedTopRight_SouthFace *= f26;
        colorGreenTopRight_SouthFace *= f26;
        colorBlueTopRight_SouthFace *= f26;
        int l1 = block.getBlockTexture(iblockaccess, i, j, k, 5);
        colorRedSlopes = f;
        colorGreenSlopes = f1;
        colorBlueSlopes = f2;
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j - 1, k, 0))
        {
            renderSlopesBottomFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j + 1, k, 1))
        {
            renderSlopesTopFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j, k - 1, 2))
        {
            renderSlopesEastFace(block, i, j, k, i1, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            if(field_27511_cfgGrassFix && i1 == 3)
            {
                colorRedTopLeft_EastFace *= f;
                colorRedBottomLeft_EastFace *= f;
                colorRedBottomRight_EastFace *= f;
                colorRedTopRight_EastFace *= f;
                colorGreenTopLeft_EastFace *= f1;
                colorGreenBottomLeft_EastFace *= f1;
                colorGreenBottomRight_EastFace *= f1;
                colorGreenTopRight_EastFace *= f1;
                colorBlueTopLeft_EastFace *= f2;
                colorBlueBottomLeft_EastFace *= f2;
                colorBlueBottomRight_EastFace *= f2;
                colorBlueTopRight_EastFace *= f2;
                renderSlopesEastFace(block, i, j, k, 38, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j, k + 1, 3))
        {
            renderSlopesWestFace(block, i, j, k, j1, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            if(field_27511_cfgGrassFix && j1 == 3)
            {
                colorRedTopLeft_WestFace *= f;
                colorRedBottomLeft_WestFace *= f;
                colorRedBottomRight_WestFace *= f;
                colorRedTopRight_WestFace *= f;
                colorGreenTopLeft_WestFace *= f1;
                colorGreenBottomLeft_WestFace *= f1;
                colorGreenBottomRight_WestFace *= f1;
                colorGreenTopRight_WestFace *= f1;
                colorBlueTopLeft_WestFace *= f2;
                colorBlueBottomLeft_WestFace *= f2;
                colorBlueBottomRight_WestFace *= f2;
                colorBlueTopRight_WestFace *= f2;
                renderSlopesWestFace(block, i, j, k, 38, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i - 1, j, k, 4))
        {
            renderSlopesNorthFace(block, i, j, k, k1, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            if(field_27511_cfgGrassFix && k1 == 3)
            {
                colorRedTopLeft_NorthFace *= f;
                colorRedBottomLeft_NorthFace *= f;
                colorRedBottomRight_NorthFace *= f;
                colorRedTopRight_NorthFace *= f;
                colorGreenTopLeft_NorthFace *= f1;
                colorGreenBottomLeft_NorthFace *= f1;
                colorGreenBottomRight_NorthFace *= f1;
                colorGreenTopRight_NorthFace *= f1;
                colorBlueTopLeft_NorthFace *= f2;
                colorBlueBottomLeft_NorthFace *= f2;
                colorBlueBottomRight_NorthFace *= f2;
                colorBlueTopRight_NorthFace *= f2;
                renderSlopesNorthFace(block, i, j, k, 38, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i + 1, j, k, 5))
        {
            renderSlopesSouthFace(block, i, j, k, l1, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            if(field_27511_cfgGrassFix && l1 == 3)
            {
                colorRedTopLeft_SouthFace *= f;
                colorRedBottomLeft_SouthFace *= f;
                colorRedBottomRight_SouthFace *= f;
                colorRedTopRight_SouthFace *= f;
                colorGreenTopLeft_SouthFace *= f1;
                colorGreenBottomLeft_SouthFace *= f1;
                colorGreenBottomRight_SouthFace *= f1;
                colorGreenTopRight_SouthFace *= f1;
                colorBlueTopLeft_SouthFace *= f2;
                colorBlueBottomLeft_SouthFace *= f2;
                colorBlueBottomRight_SouthFace *= f2;
                colorBlueTopRight_SouthFace *= f2;
                renderSlopesSouthFace(block, i, j, k, 38, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        enableAO = false;
        return true;
    }

    public boolean renderSlopesBlockWithColorMultiplier(Block block, int i, int j, int k, float f, float f1, float f2, 
            int l, RenderBlocks renderblocks, IBlockAccess iblockaccess)
    {
        Tessellator tessellator = Tessellator.instance;
        boolean flag = false;
        float f3 = 0.5F;
        float f4 = 1.0F;
        float f5 = 0.8F;
        float f6 = 0.6F;
        float f7 = f4 * f;
        float f8 = f4 * f1;
        float f9 = f4 * f2;
        if(block == Block.grass)
        {
            f = f1 = f2 = 1.0F;
        }
        float f10 = f3 * f;
        float f11 = f5 * f;
        float f12 = f6 * f;
        float f13 = f3 * f1;
        float f14 = f5 * f1;
        float f15 = f6 * f1;
        float f16 = f3 * f2;
        float f17 = f5 * f2;
        float f18 = f6 * f2;
        float f19 = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k);
        if((renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j - 1, k, 0)) && l / 4 != 2)
        {
            float f20 = block.getAmbientOcclusionLightValue(iblockaccess, i, j - 1, k);
            tessellator.setColorOpaque_F(f10 * f20, f13 * f20, f16 * f20);
            renderSlopesBottomFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            flag = true;
        }
        if((renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j + 1, k, 1)) && l / 4 != 1)
        {
            float f21 = block.getAmbientOcclusionLightValue(iblockaccess, i, j + 1, k);
            if(block.maxY != 1.0D && !block.blockMaterial.getIsLiquid())
            {
                f21 = f19;
            }
            tessellator.setColorOpaque_F(f7 * f21, f8 * f21, f9 * f21);
            renderSlopesTopFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 1), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j, k - 1, 2) || l == 6 || l == 10 || l == 12)
        {
            if(l == 6)
            {
                float f22 = f19;
                tessellator.setColorOpaque_F(f11 * f22, f14 * f22, f17 * f22);
                renderSlopesEastFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 1), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 10)
            {
                float f23 = f19;
                tessellator.setColorOpaque_F(f11 * f23, f14 * f23, f17 * f23);
                renderSlopesEastFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 12)
            {
                float f24 = f19;
                tessellator.setColorOpaque_F(f11 * f24, f14 * f24, f17 * f24);
                renderSlopesEastFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 2), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            {
                float f25 = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k - 1);
                tessellator.setColorOpaque_F(f11 * f25, f14 * f25, f17 * f25);
                renderSlopesEastFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 2), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j, k + 1, 3) || l == 7 || l == 11 || l == 13)
        {
            if(l == 7)
            {
                float f26 = f19;
                tessellator.setColorOpaque_F(f11 * f26, f14 * f26, f17 * f26);
                renderSlopesWestFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 1), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 11)
            {
                float f27 = f19;
                tessellator.setColorOpaque_F(f11 * f27, f14 * f27, f17 * f27);
                renderSlopesWestFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 13)
            {
                float f28 = f19;
                tessellator.setColorOpaque_F(f11 * f28, f14 * f28, f17 * f28);
                renderSlopesWestFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 3), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            {
                float f29 = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k + 1);
                tessellator.setColorOpaque_F(f11 * f29, f14 * f29, f17 * f29);
                renderSlopesWestFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 3), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i - 1, j, k, 4) || l == 4 || l == 8 || l == 15)
        {
            if(l == 4)
            {
                float f30 = f19;
                tessellator.setColorOpaque_F(f12 * f30, f15 * f30, f18 * f30);
                renderSlopesNorthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 1), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 8)
            {
                float f31 = f19;
                tessellator.setColorOpaque_F(f12 * f31, f15 * f31, f18 * f31);
                renderSlopesNorthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 15)
            {
                float f32 = f19;
                tessellator.setColorOpaque_F(f12 * f32, f15 * f32, f18 * f32);
                renderSlopesNorthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 4), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            {
                float f33 = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j, k);
                tessellator.setColorOpaque_F(f12 * f33, f15 * f33, f18 * f33);
                renderSlopesNorthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 4), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i + 1, j, k, 5) || l == 5 || l == 9 || l == 14)
        {
            if(l == 5)
            {
                float f34 = f19;
                tessellator.setColorOpaque_F(f12 * f34, f15 * f34, f18 * f34);
                renderSlopesSouthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 1), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 9)
            {
                float f35 = f19;
                tessellator.setColorOpaque_F(f12 * f35, f15 * f35, f18 * f35);
                renderSlopesSouthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 14)
            {
                float f36 = f19;
                tessellator.setColorOpaque_F(f12 * f36, f15 * f36, f18 * f36);
                renderSlopesSouthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 5), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            {
                float f37 = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j, k);
                tessellator.setColorOpaque_F(f12 * f37, f15 * f37, f18 * f37);
                renderSlopesSouthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 5), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        return flag;
    }

    public void renderSlopesBottomFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minX * 16D) / 256D;
        double d4 = (((double)l + block.maxX * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minZ * 16D) / 256D;
        double d6 = (((double)i1 + block.maxZ * 16D) - 0.01D) / 256D;
        if(block.minX < 0.0D || block.maxX > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minZ < 0.0D || block.maxZ > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d7 = d + block.minX;
        double d8 = d + block.maxX;
        double d9 = d1 + block.minY;
        double d10 = d2 + block.minZ;
        double d11 = d2 + block.maxZ;
        if(enableAO)
        {
            if(j == 4 || j == 5 || j == 6 || j == 7)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_BottomFace, colorGreenTopLeft_BottomFace, colorBlueTopLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_BottomFace, colorGreenBottomLeft_BottomFace, colorBlueBottomLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_BottomFace, colorGreenBottomRight_BottomFace, colorBlueBottomRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_BottomFace, colorGreenTopRight_BottomFace, colorBlueTopRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            } else
            if(j == 12)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_BottomFace, colorGreenTopLeft_BottomFace, colorBlueTopLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_BottomFace, colorGreenBottomRight_BottomFace, colorBlueBottomRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_BottomFace, colorGreenBottomRight_BottomFace, colorBlueBottomRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_BottomFace, colorGreenTopRight_BottomFace, colorBlueTopRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            } else
            if(j == 13)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_BottomFace, colorGreenTopLeft_BottomFace, colorBlueTopLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_BottomFace, colorGreenBottomLeft_BottomFace, colorBlueBottomLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_BottomFace, colorGreenBottomRight_BottomFace, colorBlueBottomRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopLeft_BottomFace, colorGreenTopLeft_BottomFace, colorBlueTopLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            } else
            if(j == 14)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_BottomFace, colorGreenTopLeft_BottomFace, colorBlueTopLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_BottomFace, colorGreenBottomLeft_BottomFace, colorBlueBottomLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_BottomFace, colorGreenTopRight_BottomFace, colorBlueTopRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_BottomFace, colorGreenTopRight_BottomFace, colorBlueTopRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            } else
            if(j == 15)
            {
                tessellator.setColorOpaque_F(colorRedBottomLeft_BottomFace, colorGreenBottomLeft_BottomFace, colorBlueBottomLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_BottomFace, colorGreenBottomLeft_BottomFace, colorBlueBottomLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_BottomFace, colorGreenBottomRight_BottomFace, colorBlueBottomRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_BottomFace, colorGreenTopRight_BottomFace, colorBlueTopRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            }
        } else
        if(j == 4 || j == 5 || j == 6 || j == 7)
        {
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
        } else
        if(j == 12)
        {
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
        } else
        if(j == 13)
        {
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
        } else
        if(j == 14)
        {
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
        } else
        if(j == 15)
        {
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
        }
    }

    public void renderSlopesTopFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minX * 16D) / 256D;
        double d4 = (((double)l + block.maxX * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minZ * 16D) / 256D;
        double d6 = (((double)i1 + block.maxZ * 16D) - 0.01D) / 256D;
        if(block.minX < 0.0D || block.maxX > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minZ < 0.0D || block.maxZ > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d7 = d + block.minX;
        double d8 = d + block.maxX;
        double d9 = d1 + block.maxY;
        double d10 = d2 + block.minZ;
        double d11 = d2 + block.maxZ;
        if(enableAO)
        {
            if(j == 8 || j == 9 || j == 10 || j == 11)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_TopFace, colorGreenTopLeft_TopFace, colorBlueTopLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_TopFace, colorGreenBottomLeft_TopFace, colorBlueBottomLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_TopFace, colorGreenBottomRight_TopFace, colorBlueBottomRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_TopFace, colorGreenTopRight_TopFace, colorBlueTopRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            } else
            if(j == 12)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_TopFace, colorGreenTopLeft_TopFace, colorBlueTopLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_TopFace, colorGreenBottomLeft_TopFace, colorBlueBottomLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_TopFace, colorGreenTopRight_TopFace, colorBlueTopRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_TopFace, colorGreenTopRight_TopFace, colorBlueTopRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            } else
            if(j == 13)
            {
                tessellator.setColorOpaque_F(colorRedBottomLeft_TopFace, colorGreenBottomLeft_TopFace, colorBlueBottomLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_TopFace, colorGreenBottomLeft_TopFace, colorBlueBottomLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_TopFace, colorGreenBottomRight_TopFace, colorBlueBottomRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_TopFace, colorGreenTopRight_TopFace, colorBlueTopRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            } else
            if(j == 14)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_TopFace, colorGreenTopLeft_TopFace, colorBlueTopLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_TopFace, colorGreenBottomRight_TopFace, colorBlueBottomRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_TopFace, colorGreenBottomRight_TopFace, colorBlueBottomRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_TopFace, colorGreenTopRight_TopFace, colorBlueTopRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            } else
            if(j == 15)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_TopFace, colorGreenTopLeft_TopFace, colorBlueTopLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_TopFace, colorGreenBottomLeft_TopFace, colorBlueBottomLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_TopFace, colorGreenBottomRight_TopFace, colorBlueBottomRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopLeft_TopFace, colorGreenTopLeft_TopFace, colorBlueTopLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            }
        } else
        if(j == 8 || j == 9 || j == 10 || j == 11)
        {
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
        } else
        if(j == 12)
        {
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
        } else
        if(j == 13)
        {
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
        } else
        if(j == 14)
        {
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
        } else
        if(j == 15)
        {
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
        }
    }

    public void renderSlopesEastFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minX * 16D) / 256D;
        double d4 = (((double)l + block.maxX * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minY * 16D) / 256D;
        double d6 = (((double)i1 + block.maxY * 16D) - 0.01D) / 256D;
        if(renderblocks.flipTexture)
        {
            double d7 = d3;
            d3 = d4;
            d4 = d7;
        }
        if(block.minX < 0.0D || block.maxX > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minY < 0.0D || block.maxY > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d8 = d + block.minX;
        double d9 = d + block.maxX;
        double d10 = d1 + block.minY;
        double d11 = d1 + block.maxY;
        double d12 = d2 + block.minZ;
        double d13 = d2 + block.maxZ;
        if(enableAO)
        {
            if(j == 7 || j == 11 || j == 13 || j == 15)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_EastFace, colorGreenTopLeft_EastFace, colorBlueTopLeft_EastFace);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_EastFace, colorGreenBottomLeft_EastFace, colorBlueBottomLeft_EastFace);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_EastFace, colorGreenBottomRight_EastFace, colorBlueBottomRight_EastFace);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_EastFace, colorGreenTopRight_EastFace, colorBlueTopRight_EastFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            } else
            if(j == 4)
            {
                tessellator.setColorOpaque_F(colorRedTopRight_EastFace, colorGreenTopRight_EastFace, colorBlueTopRight_EastFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_EastFace, colorGreenBottomLeft_EastFace, colorBlueBottomLeft_EastFace);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_EastFace, colorGreenBottomRight_EastFace, colorBlueBottomRight_EastFace);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_EastFace, colorGreenTopRight_EastFace, colorBlueTopRight_EastFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            } else
            if(j == 5)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_EastFace, colorGreenTopLeft_EastFace, colorBlueTopLeft_EastFace);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_EastFace, colorGreenBottomRight_EastFace, colorBlueBottomRight_EastFace);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_EastFace, colorGreenBottomRight_EastFace, colorBlueBottomRight_EastFace);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_EastFace, colorGreenTopRight_EastFace, colorBlueTopRight_EastFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            } else
            if(j == 6)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d13, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d13, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorTop + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorTop + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorTop + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorTop + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorTop + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorTop + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            } else
            if(j == 8)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_EastFace, colorGreenTopLeft_EastFace, colorBlueTopLeft_EastFace);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_EastFace, colorGreenBottomLeft_EastFace, colorBlueBottomLeft_EastFace);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_EastFace, colorGreenBottomRight_EastFace, colorBlueBottomRight_EastFace);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopLeft_EastFace, colorGreenTopLeft_EastFace, colorBlueTopLeft_EastFace);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            } else
            if(j == 9)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_EastFace, colorGreenTopLeft_EastFace, colorBlueTopLeft_EastFace);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_EastFace, colorGreenBottomLeft_EastFace, colorBlueBottomLeft_EastFace);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_EastFace, colorGreenBottomLeft_EastFace, colorBlueBottomLeft_EastFace);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_EastFace, colorGreenTopRight_EastFace, colorBlueTopRight_EastFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            } else
            if(j == 10)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorBottom + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorBottom + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorBottom + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorBottom + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorBottom + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorBottom + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d13, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d13, d4, d6);
            } else
            if(j == 12)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorNorth + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorNorth + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorNorth + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d13, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorNorth + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorNorth + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorNorth + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorNorth + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorNorth + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorNorth + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorNorth + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorNorth + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorNorth + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d13, d4, d6);
            }
        } else
        if(j == 7 || j == 11 || j == 13 || j == 15)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
        } else
        if(j == 4)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
        } else
        if(j == 5)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
        } else
        if(j == 6)
        {
            tessellator.addVertexWithUV(d8, d11, d13, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d13, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
        } else
        if(j == 8)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
        } else
        if(j == 9)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
        } else
        if(j == 10)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d13, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d13, d4, d6);
        } else
        if(j == 12)
        {
            tessellator.addVertexWithUV(d8, d11, d13, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d13, d4, d6);
        }
    }

    public void renderSlopesWestFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minX * 16D) / 256D;
        double d4 = (((double)l + block.maxX * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minY * 16D) / 256D;
        double d6 = (((double)i1 + block.maxY * 16D) - 0.01D) / 256D;
        if(renderblocks.flipTexture)
        {
            double d7 = d3;
            d3 = d4;
            d4 = d7;
        }
        if(block.minX < 0.0D || block.maxX > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minY < 0.0D || block.maxY > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d8 = d + block.minX;
        double d9 = d + block.maxX;
        double d10 = d1 + block.minY;
        double d11 = d1 + block.maxY;
        double d12 = d2 + block.maxZ;
        double d13 = d2 + block.minZ;
        if(enableAO)
        {
            if(j == 6 || j == 10 || j == 12 || j == 14)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_WestFace, colorGreenTopLeft_WestFace, colorBlueTopLeft_WestFace);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_WestFace, colorGreenBottomLeft_WestFace, colorBlueBottomLeft_WestFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_WestFace, colorGreenBottomRight_WestFace, colorBlueBottomRight_WestFace);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_WestFace, colorGreenTopRight_WestFace, colorBlueTopRight_WestFace);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            } else
            if(j == 4)
            {
                tessellator.setColorOpaque_F(colorRedBottomLeft_WestFace, colorGreenBottomLeft_WestFace, colorBlueBottomLeft_WestFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_WestFace, colorGreenBottomLeft_WestFace, colorBlueBottomLeft_WestFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_WestFace, colorGreenBottomRight_WestFace, colorBlueBottomRight_WestFace);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_WestFace, colorGreenTopRight_WestFace, colorBlueTopRight_WestFace);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            } else
            if(j == 5)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_WestFace, colorGreenTopLeft_WestFace, colorBlueTopLeft_WestFace);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_WestFace, colorGreenBottomLeft_WestFace, colorBlueBottomLeft_WestFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_WestFace, colorGreenBottomRight_WestFace, colorBlueBottomRight_WestFace);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_WestFace, colorGreenBottomRight_WestFace, colorBlueBottomRight_WestFace);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            } else
            if(j == 7)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d13, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorTop + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorTop + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorTop + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorTop + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorTop + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorTop + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d13, d4, d5);
            } else
            if(j == 8)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_WestFace, colorGreenTopLeft_WestFace, colorBlueTopLeft_WestFace);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopLeft_WestFace, colorGreenTopLeft_WestFace, colorBlueTopLeft_WestFace);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_WestFace, colorGreenBottomRight_WestFace, colorBlueBottomRight_WestFace);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_WestFace, colorGreenTopRight_WestFace, colorBlueTopRight_WestFace);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            } else
            if(j == 9)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_WestFace, colorGreenTopLeft_WestFace, colorBlueTopLeft_WestFace);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_WestFace, colorGreenBottomLeft_WestFace, colorBlueBottomLeft_WestFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_WestFace, colorGreenTopRight_WestFace, colorBlueTopRight_WestFace);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_WestFace, colorGreenTopRight_WestFace, colorBlueTopRight_WestFace);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            } else
            if(j == 11)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorBottom + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorBottom + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorBottom + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d13, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d13, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorBottom + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorBottom + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorBottom + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            } else
            if(j == 13)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorSouth + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorSouth + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorSouth + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorSouth + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorSouth + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorSouth + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorSouth + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorSouth + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorSouth + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d13, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorSouth + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorSouth + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorSouth + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d13, d4, d5);
            }
        } else
        if(j == 6 || j == 10 || j == 12 || j == 14)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
        } else
        if(j == 4)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
        } else
        if(j == 5)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
        } else
        if(j == 7)
        {
            tessellator.addVertexWithUV(d8, d11, d13, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d13, d4, d5);
        } else
        if(j == 8)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
        } else
        if(j == 9)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
        } else
        if(j == 11)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d13, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d13, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
        } else
        if(j == 13)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d13, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d13, d4, d5);
        }
    }

    public void renderSlopesNorthFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minZ * 16D) / 256D;
        double d4 = (((double)l + block.maxZ * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minY * 16D) / 256D;
        double d6 = (((double)i1 + block.maxY * 16D) - 0.01D) / 256D;
        if(renderblocks.flipTexture)
        {
            double d7 = d3;
            d3 = d4;
            d4 = d7;
        }
        if(block.minZ < 0.0D || block.maxZ > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minY < 0.0D || block.maxY > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d8 = d + block.minX;
        double d9 = d1 + block.minY;
        double d10 = d1 + block.maxY;
        double d11 = d2 + block.minZ;
        double d12 = d2 + block.maxZ;
        double d13 = d + block.maxX;
        if(enableAO)
        {
            if(j == 5 || j == 9 || j == 13 || j == 14)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_NorthFace, colorGreenTopLeft_NorthFace, colorBlueTopLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_NorthFace, colorGreenBottomLeft_NorthFace, colorBlueBottomLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_NorthFace, colorGreenBottomRight_NorthFace, colorBlueBottomRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_NorthFace, colorGreenTopRight_NorthFace, colorBlueTopRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            } else
            if(j == 4)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d12, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d11, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorTop + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorTop + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorTop + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorTop + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorTop + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorTop + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            } else
            if(j == 6)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_NorthFace, colorGreenTopLeft_NorthFace, colorBlueTopLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_NorthFace, colorGreenBottomRight_NorthFace, colorBlueBottomRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_NorthFace, colorGreenBottomRight_NorthFace, colorBlueBottomRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_NorthFace, colorGreenTopRight_NorthFace, colorBlueTopRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            } else
            if(j == 7)
            {
                tessellator.setColorOpaque_F(colorRedTopRight_NorthFace, colorGreenTopRight_NorthFace, colorBlueTopRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_NorthFace, colorGreenBottomLeft_NorthFace, colorBlueBottomLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_NorthFace, colorGreenBottomRight_NorthFace, colorBlueBottomRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_NorthFace, colorGreenTopRight_NorthFace, colorBlueTopRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            } else
            if(j == 8)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorBottom + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorBottom + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorBottom + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorBottom + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorBottom + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorBottom + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d11, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d12, d4, d6);
            } else
            if(j == 10)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_NorthFace, colorGreenTopLeft_NorthFace, colorBlueTopLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_NorthFace, colorGreenBottomLeft_NorthFace, colorBlueBottomLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_NorthFace, colorGreenBottomLeft_NorthFace, colorBlueBottomLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_NorthFace, colorGreenTopRight_NorthFace, colorBlueTopRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            } else
            if(j == 11)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_NorthFace, colorGreenTopLeft_NorthFace, colorBlueTopLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_NorthFace, colorGreenBottomLeft_NorthFace, colorBlueBottomLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_NorthFace, colorGreenBottomRight_NorthFace, colorBlueBottomRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopLeft_NorthFace, colorGreenTopLeft_NorthFace, colorBlueTopLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            } else
            if(j == 15)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorWest + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorWest + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorWest + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d12, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorWest + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorWest + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorWest + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorWest + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorWest + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorWest + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorWest + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorWest + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorWest + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d12, d4, d6);
            }
        } else
        if(j == 5 || j == 9 || j == 13 || j == 14)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
        } else
        if(j == 4)
        {
            tessellator.addVertexWithUV(d13, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d13, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
        } else
        if(j == 6)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
        } else
        if(j == 7)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
        } else
        if(j == 8)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d13, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d13, d9, d12, d4, d6);
        } else
        if(j == 10)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
        } else
        if(j == 11)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
        } else
        if(j == 15)
        {
            tessellator.addVertexWithUV(d13, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d13, d9, d12, d4, d6);
        }
    }

    public void renderSlopesSouthFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minZ * 16D) / 256D;
        double d4 = (((double)l + block.maxZ * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minY * 16D) / 256D;
        double d6 = (((double)i1 + block.maxY * 16D) - 0.01D) / 256D;
        if(renderblocks.flipTexture)
        {
            double d7 = d3;
            d3 = d4;
            d4 = d7;
        }
        if(block.minZ < 0.0D || block.maxZ > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minY < 0.0D || block.maxY > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d8 = d + block.maxX;
        double d9 = d1 + block.minY;
        double d10 = d1 + block.maxY;
        double d11 = d2 + block.minZ;
        double d12 = d2 + block.maxZ;
        double d13 = d + block.minX;
        if(enableAO)
        {
            if(j == 4 || j == 8 || j == 12 || j == 15)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_SouthFace, colorGreenTopLeft_SouthFace, colorBlueTopLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_SouthFace, colorGreenBottomLeft_SouthFace, colorBlueBottomLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_SouthFace, colorGreenBottomRight_SouthFace, colorBlueBottomRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_SouthFace, colorGreenTopRight_SouthFace, colorBlueTopRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            } else
            if(j == 5)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorTop + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorTop + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorTop + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorTop + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorTop + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorTop + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d11, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d12, d3, d5);
            } else
            if(j == 6)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_SouthFace, colorGreenTopLeft_SouthFace, colorBlueTopLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_SouthFace, colorGreenBottomLeft_SouthFace, colorBlueBottomLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_SouthFace, colorGreenBottomLeft_SouthFace, colorBlueBottomLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_SouthFace, colorGreenTopRight_SouthFace, colorBlueTopRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            } else
            if(j == 7)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_SouthFace, colorGreenTopLeft_SouthFace, colorBlueTopLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_SouthFace, colorGreenBottomLeft_SouthFace, colorBlueBottomLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_SouthFace, colorGreenBottomRight_SouthFace, colorBlueBottomRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopLeft_SouthFace, colorGreenTopLeft_SouthFace, colorBlueTopLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            } else
            if(j == 9)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d11, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorBottom + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorBottom + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorBottom + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorBottom + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorBottom + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorBottom + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            } else
            if(j == 10)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_SouthFace, colorGreenTopLeft_SouthFace, colorBlueTopLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_SouthFace, colorGreenBottomRight_SouthFace, colorBlueBottomRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_SouthFace, colorGreenBottomRight_SouthFace, colorBlueBottomRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_SouthFace, colorGreenTopRight_SouthFace, colorBlueTopRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            } else
            if(j == 11)
            {
                tessellator.setColorOpaque_F(colorRedTopRight_SouthFace, colorGreenTopRight_SouthFace, colorBlueTopRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_SouthFace, colorGreenBottomLeft_SouthFace, colorBlueBottomLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_SouthFace, colorGreenBottomRight_SouthFace, colorBlueBottomRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_SouthFace, colorGreenTopRight_SouthFace, colorBlueTopRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            } else
            if(j == 14)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorEast + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorEast + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorEast + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorEast + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorEast + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorEast + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d11, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorEast + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorEast + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorEast + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d11, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorEast + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorEast + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorEast + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            }
        } else
        if(j == 4 || j == 8 || j == 12 || j == 15)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        } else
        if(j == 5)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d13, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d13, d10, d12, d3, d5);
        } else
        if(j == 6)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        } else
        if(j == 7)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
        } else
        if(j == 9)
        {
            tessellator.addVertexWithUV(d13, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d13, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        } else
        if(j == 10)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        } else
        if(j == 11)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        } else
        if(j == 14)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d13, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d13, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        }
    }

    
	public String getVersion() {
		return "Release 1.0.0 - By GreenCubes";
	}

	@Override
	public void load() {
		
	}
}