// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces deadcode fieldsfirst 

package net.minecraft.src;

import java.util.ArrayList;
import java.util.Random;

// Referenced classes of package net.minecraft.src:
//            Block, IBlockAccess, World, Material, 
//            AxisAlignedBB

public class BlockPane extends Block {

	private int field_35300_a;
	private final boolean field_40213_b;
	private int renderStage;

	protected BlockPane(int i, int j, int k, Material material, boolean flag) {
		super(i, j, material);
		field_35300_a = k;
		field_40213_b = flag;
	}

	@Override
	public int idDropped(int i, Random random, int j) {
		if(!field_40213_b) {
			return 0;
		} else {
			return super.idDropped(i, random, j);
		}
	}

	@Override
	public boolean isOpaqueCube() {
		return false;
	}

	@Override
	public boolean renderAsNormalBlock() {
		return false;
	}

	@Override
	public int getRenderType() {
		return 18;
	}

	public void setRenderStage(IBlockAccess iblockaccess, int x, int y, int z, int stage) {
		boolean flag = false;
		boolean flag1 = false;
		boolean flag2 = false;
		boolean flag3 = false;
		float f = 0.4375F;
		float f1 = 0.5625F;
		float f2 = 0.4375F;
		float f3 = 0.5625F;
		this.renderStage = stage;
		if(stage == 0) {
			flag = func_35298_d(iblockaccess.getBlockId(x, y, z - 1));
			flag1 = func_35298_d(iblockaccess.getBlockId(x, y, z + 1));
			
		} else if(stage == 1) {
			
		}
	}
	
	@Override
	public boolean shouldSideBeRendered(IBlockAccess iblockaccess, int i, int j, int k, int l) {
		int i1 = iblockaccess.getBlockId(i, j, k);
		if(i1 == blockID) {
			return false;
		} else {
			return super.shouldSideBeRendered(iblockaccess, i, j, k, l);
		}
	}

	@Override
	public void getCollidingBoundingBoxes(World world, int i, int j, int k, AxisAlignedBB axisalignedbb, ArrayList arraylist) {
		boolean flag = func_35298_d(world.getBlockId(i, j, k - 1));
		boolean flag1 = func_35298_d(world.getBlockId(i, j, k + 1));
		boolean flag2 = func_35298_d(world.getBlockId(i - 1, j, k));
		boolean flag3 = func_35298_d(world.getBlockId(i + 1, j, k));
		if(flag2 && flag3 || !flag2 && !flag3 && !flag && !flag1) {
			setBlockBounds(0.0F, 0.0F, 0.4375F, 1.0F, 1.0F, 0.5625F);
			super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
		} else if(flag2 && !flag3) {
			setBlockBounds(0.0F, 0.0F, 0.4375F, 0.5F, 1.0F, 0.5625F);
			super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
		} else if(!flag2 && flag3) {
			setBlockBounds(0.5F, 0.0F, 0.4375F, 1.0F, 1.0F, 0.5625F);
			super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
		}
		if(flag && flag1 || !flag2 && !flag3 && !flag && !flag1) {
			setBlockBounds(0.4375F, 0.0F, 0.0F, 0.5625F, 1.0F, 1.0F);
			super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
		} else if(flag && !flag1) {
			setBlockBounds(0.4375F, 0.0F, 0.0F, 0.5625F, 1.0F, 0.5F);
			super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
		} else if(!flag && flag1) {
			setBlockBounds(0.4375F, 0.0F, 0.5F, 0.5625F, 1.0F, 1.0F);
			super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
		}
	}

	@Override
	public void setBlockBoundsForItemRender() {
		setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
	}

	@Override
	public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
		float f = 0.4375F;
		float f1 = 0.5625F;
		float f2 = 0.4375F;
		float f3 = 0.5625F;
		boolean flag = func_35298_d(iblockaccess.getBlockId(i, j, k - 1));
		boolean flag1 = func_35298_d(iblockaccess.getBlockId(i, j, k + 1));
		boolean flag2 = func_35298_d(iblockaccess.getBlockId(i - 1, j, k));
		boolean flag3 = func_35298_d(iblockaccess.getBlockId(i + 1, j, k));
		if(flag2 && flag3 || !flag2 && !flag3 && !flag && !flag1) {
			f = 0.0F;
			f1 = 1.0F;
		} else if(flag2 && !flag3) {
			f = 0.0F;
		} else if(!flag2 && flag3) {
			f1 = 1.0F;
		}
		if(flag && flag1 || !flag2 && !flag3 && !flag && !flag1) {
			f2 = 0.0F;
			f3 = 1.0F;
		} else if(flag && !flag1) {
			f2 = 0.0F;
		} else if(!flag && flag1) {
			f3 = 1.0F;
		}
		setBlockBounds(f, 0.0F, f2, f1, 1.0F, f3);
	}

	public int func_35299_s() {
		return field_35300_a;
	}

	public final boolean func_35298_d(int i) {
		return Block.opaqueCubeLookup[i] || i == blockID || i == Block.glass.blockID;
	}
}
