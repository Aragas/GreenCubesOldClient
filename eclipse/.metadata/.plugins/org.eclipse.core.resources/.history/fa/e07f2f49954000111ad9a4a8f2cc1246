package net.minecraft.src;

import net.minecraft.client.Minecraft;

public class RenderSlope {

	public RenderSlope() {

	}

    public static int SlopesRenderID;
    public boolean enableAO;
    public float aoLightValueThis;
    public float aoLightValueXNeg;
    public float aoLightValueYNeg;
    public float aoLightValueZNeg;
    public float aoLightValueXPos;
    public float aoLightValueYPos;
    public float aoLightValueZPos;
    public float aoLightValueXNegYNegZNeg;
    public float aoLightValueXNegYNeg;
    public float aoLightValueXNegYNegZPos;
    public float aoLightValueYNegZNeg;
    public float aoLightValueYNegZPos;
    public float aoLightValueXPosYNegZNeg;
    public float aoLightValueXPosYNeg;
    public float aoLightValueXPosYNegZPos;
    public float aoLightValueXNegYPosZNeg;
    public float aoLightValueXNegYPos;
    public float aoLightValueXNegYPosZPos;
    public float aoLightValueYPosZNeg;
    public float aoLightValueXPosYPosZNeg;
    public float aoLightValueXPosYPos;
    public float aoLightValueYPosZPos;
    public float aoLightValueXPosYPosZPos;
    public float aoLightValueXNegZNeg;
    public float aoLightValueXPosZNeg;
    public float aoLightValueXNegZPos;
    public float aoLightValueXPosZPos;
    public int field_22352_G;
    public boolean isBlockYPosZNeg;
    public boolean isBlockXPosYPos;
    public boolean isBlockXNegYPos;
    public boolean isBlockYPosZPos;
    public boolean isBlockXNegZNeg;
    public boolean isBlockXPosZPos;
    public boolean isBlockXNegZPos;
    public boolean isBlockXPosZNeg;
    public boolean isBlockYNegZNeg;
    public boolean isBlockXPosYNeg;
    public boolean isBlockXNegYNeg;
    public boolean isBlockYNegZPos;
    public float colorRedTopLeft_TopFace;
    public float colorRedBottomLeft_TopFace;
    public float colorRedBottomRight_TopFace;
    public float colorRedTopRight_TopFace;
    public float colorGreenTopLeft_TopFace;
    public float colorGreenBottomLeft_TopFace;
    public float colorGreenBottomRight_TopFace;
    public float colorGreenTopRight_TopFace;
    public float colorBlueTopLeft_TopFace;
    public float colorBlueBottomLeft_TopFace;
    public float colorBlueBottomRight_TopFace;
    public float colorBlueTopRight_TopFace;
    public float colorRedTopLeft_BottomFace;
    public float colorRedBottomLeft_BottomFace;
    public float colorRedBottomRight_BottomFace;
    public float colorRedTopRight_BottomFace;
    public float colorGreenTopLeft_BottomFace;
    public float colorGreenBottomLeft_BottomFace;
    public float colorGreenBottomRight_BottomFace;
    public float colorGreenTopRight_BottomFace;
    public float colorBlueTopLeft_BottomFace;
    public float colorBlueBottomLeft_BottomFace;
    public float colorBlueBottomRight_BottomFace;
    public float colorBlueTopRight_BottomFace;
    public float colorRedTopLeft_EastFace;
    public float colorRedBottomLeft_EastFace;
    public float colorRedBottomRight_EastFace;
    public float colorRedTopRight_EastFace;
    public float colorGreenTopLeft_EastFace;
    public float colorGreenBottomLeft_EastFace;
    public float colorGreenBottomRight_EastFace;
    public float colorGreenTopRight_EastFace;
    public float colorBlueTopLeft_EastFace;
    public float colorBlueBottomLeft_EastFace;
    public float colorBlueBottomRight_EastFace;
    public float colorBlueTopRight_EastFace;
    public float colorRedTopLeft_WestFace;
    public float colorRedBottomLeft_WestFace;
    public float colorRedBottomRight_WestFace;
    public float colorRedTopRight_WestFace;
    public float colorGreenTopLeft_WestFace;
    public float colorGreenBottomLeft_WestFace;
    public float colorGreenBottomRight_WestFace;
    public float colorGreenTopRight_WestFace;
    public float colorBlueTopLeft_WestFace;
    public float colorBlueBottomLeft_WestFace;
    public float colorBlueBottomRight_WestFace;
    public float colorBlueTopRight_WestFace;
    public float colorRedTopLeft_NorthFace;
    public float colorRedBottomLeft_NorthFace;
    public float colorRedBottomRight_NorthFace;
    public float colorRedTopRight_NorthFace;
    public float colorGreenTopLeft_NorthFace;
    public float colorGreenBottomLeft_NorthFace;
    public float colorGreenBottomRight_NorthFace;
    public float colorGreenTopRight_NorthFace;
    public float colorBlueTopLeft_NorthFace;
    public float colorBlueBottomLeft_NorthFace;
    public float colorBlueBottomRight_NorthFace;
    public float colorBlueTopRight_NorthFace;
    public float colorRedTopLeft_SouthFace;
    public float colorRedBottomLeft_SouthFace;
    public float colorRedBottomRight_SouthFace;
    public float colorRedTopRight_SouthFace;
    public float colorGreenTopLeft_SouthFace;
    public float colorGreenBottomLeft_SouthFace;
    public float colorGreenBottomRight_SouthFace;
    public float colorGreenTopRight_SouthFace;
    public float colorBlueTopLeft_SouthFace;
    public float colorBlueBottomLeft_SouthFace;
    public float colorBlueBottomRight_SouthFace;
    public float colorBlueTopRight_SouthFace;
    public float colorRedSlopes;
    public float colorGreenSlopes;
    public float colorBlueSlopes;
    public static boolean fancyGrass = true;
    public static boolean field_27511_cfgGrassFix = true;
    public float factorTop;
    public float factorBottom;
    public float factorEast;
    public float factorWest;
    public float factorNorth;
    public float factorSouth;
	
	public boolean RenderWorldBlock(RenderBlocks renderblocks, IBlockAccess iblockaccess, int i, int j, int k, Block block, int l) {
        if(l == SlopesRenderID)
            return renderBlockSlopes(block, i, j, k, renderblocks, iblockaccess);
        return true;
	}
	
    public boolean renderBlockSlopes(Block block, int i, int j, int k, RenderBlocks renderblocks, IBlockAccess iblockaccess)
    {
        int l = iblockaccess.getBlockMetadata(i, j, k);
        int i1 = block.colorMultiplier(iblockaccess, i, j, k);
        float f = (float)(i1 >> 16 & 0xff) / 255F;
        float f1 = (float)(i1 >> 8 & 0xff) / 255F;
        float f2 = (float)(i1 & 0xff) / 255F;
        if(Minecraft.isAmbientOcclusionEnabled())
        {
            return renderSlopesBlockWithAmbientOcclusion(block, i, j, k, f, f1, f2, l, renderblocks, iblockaccess);
        } else
        {
            return renderSlopesBlockWithColorMultiplier(block, i, j, k, f, f1, f2, l, renderblocks, iblockaccess);
        }

    }
	
    public boolean renderSlopesBlockWithAmbientOcclusion(Block block, int i, int j, int k, float f, float f1, float f2, 
            int l, RenderBlocks renderblocks, IBlockAccess iblockaccess)
    {
        enableAO = true;
        boolean flag = false;
        boolean flag1 = true;
        boolean flag2 = true;
        boolean flag3 = true;
        boolean flag4 = true;
        boolean flag5 = true;
        boolean flag6 = true;
        aoLightValueThis = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k);
        aoLightValueXNeg = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j, k);
        aoLightValueYNeg = block.getAmbientOcclusionLightValue(iblockaccess, i, j - 1, k);
        aoLightValueZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k - 1);
        aoLightValueXPos = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j, k);
        aoLightValueYPos = block.getAmbientOcclusionLightValue(iblockaccess, i, j + 1, k);
        aoLightValueZPos = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k + 1);
        aoLightValueXPosYPos = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j + 1, k);
        aoLightValueXPosYNeg = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j - 1, k);
        aoLightValueXPosZPos = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j, k + 1);
        aoLightValueXPosZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j, k - 1);
        aoLightValueXNegYPos = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j + 1, k);
        aoLightValueXNegYNeg = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j - 1, k);
        aoLightValueXNegZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j, k - 1);
        aoLightValueXNegZPos = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j, k + 1);
        aoLightValueYPosZPos = block.getAmbientOcclusionLightValue(iblockaccess, i, j + 1, k + 1);
        aoLightValueYPosZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i, j + 1, k - 1);
        aoLightValueYNegZPos = block.getAmbientOcclusionLightValue(iblockaccess, i, j - 1, k + 1);
        aoLightValueYNegZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i, j - 1, k - 1);
        aoLightValueXPosYPosZPos = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j + 1, k + 1);
        aoLightValueXPosYNegZPos = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j - 1, k + 1);
        aoLightValueXPosYPosZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j + 1, k - 1);
        aoLightValueXPosYNegZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j - 1, k - 1);
        aoLightValueXNegYPosZPos = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j + 1, k + 1);
        aoLightValueXNegYNegZPos = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j - 1, k + 1);
        aoLightValueXNegYPosZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j + 1, k - 1);
        aoLightValueXNegYNegZNeg = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j - 1, k - 1);
        if(block.blockIndexInTexture == 3)
        {
            flag1 = flag3 = flag4 = flag5 = flag6 = false;
        }
        float f3;
        float f4;
        float f5;
        float f6;
        if(field_22352_G > 0)
        {
            f3 = (aoLightValueXNegYNegZPos + aoLightValueXNegYNeg + aoLightValueYNegZPos + aoLightValueYNeg) / 4F;
            f6 = (aoLightValueYNegZPos + aoLightValueYNeg + aoLightValueXPosYNegZPos + aoLightValueXPosYNeg) / 4F;
            f5 = (aoLightValueYNeg + aoLightValueYNegZNeg + aoLightValueXPosYNeg + aoLightValueXPosYNegZNeg) / 4F;
            f4 = (aoLightValueXNegYNeg + aoLightValueXNegYNegZNeg + aoLightValueYNeg + aoLightValueYNegZNeg) / 4F;
        } else
        {
            f3 = f4 = f5 = f6 = aoLightValueYNeg;
        }
        colorRedTopLeft_BottomFace = colorRedBottomLeft_BottomFace = colorRedBottomRight_BottomFace = colorRedTopRight_BottomFace = (flag1 ? f : 1.0F) * 0.5F;
        colorGreenTopLeft_BottomFace = colorGreenBottomLeft_BottomFace = colorGreenBottomRight_BottomFace = colorGreenTopRight_BottomFace = (flag1 ? f1 : 1.0F) * 0.5F;
        colorBlueTopLeft_BottomFace = colorBlueBottomLeft_BottomFace = colorBlueBottomRight_BottomFace = colorBlueTopRight_BottomFace = (flag1 ? f2 : 1.0F) * 0.5F;
        colorRedTopLeft_BottomFace *= f3;
        colorGreenTopLeft_BottomFace *= f3;
        colorBlueTopLeft_BottomFace *= f3;
        colorRedBottomLeft_BottomFace *= f4;
        colorGreenBottomLeft_BottomFace *= f4;
        colorBlueBottomLeft_BottomFace *= f4;
        colorRedBottomRight_BottomFace *= f5;
        colorGreenBottomRight_BottomFace *= f5;
        colorBlueBottomRight_BottomFace *= f5;
        colorRedTopRight_BottomFace *= f6;
        colorGreenTopRight_BottomFace *= f6;
        colorBlueTopRight_BottomFace *= f6;
        float f7;
        float f8;
        float f9;
        float f10;
        if(field_22352_G > 0)
        {
            f10 = (aoLightValueXNegYPosZPos + aoLightValueXNegYPos + aoLightValueYPosZPos + aoLightValueYPos) / 4F;
            f7 = (aoLightValueYPosZPos + aoLightValueYPos + aoLightValueXPosYPosZPos + aoLightValueXPosYPos) / 4F;
            f8 = (aoLightValueYPos + aoLightValueYPosZNeg + aoLightValueXPosYPos + aoLightValueXPosYPosZNeg) / 4F;
            f9 = (aoLightValueXNegYPos + aoLightValueXNegYPosZNeg + aoLightValueYPos + aoLightValueYPosZNeg) / 4F;
        } else
        {
            f7 = f8 = f9 = f10 = aoLightValueYPos;
        }
        colorRedTopLeft_TopFace = colorRedBottomLeft_TopFace = colorRedBottomRight_TopFace = colorRedTopRight_TopFace = flag2 ? f : 1.0F;
        colorGreenTopLeft_TopFace = colorGreenBottomLeft_TopFace = colorGreenBottomRight_TopFace = colorGreenTopRight_TopFace = flag2 ? f1 : 1.0F;
        colorBlueTopLeft_TopFace = colorBlueBottomLeft_TopFace = colorBlueBottomRight_TopFace = colorBlueTopRight_TopFace = flag2 ? f2 : 1.0F;
        colorRedTopLeft_TopFace *= f7;
        colorGreenTopLeft_TopFace *= f7;
        colorBlueTopLeft_TopFace *= f7;
        colorRedBottomLeft_TopFace *= f8;
        colorGreenBottomLeft_TopFace *= f8;
        colorBlueBottomLeft_TopFace *= f8;
        colorRedBottomRight_TopFace *= f9;
        colorGreenBottomRight_TopFace *= f9;
        colorBlueBottomRight_TopFace *= f9;
        colorRedTopRight_TopFace *= f10;
        colorGreenTopRight_TopFace *= f10;
        colorBlueTopRight_TopFace *= f10;
        float f11;
        float f12;
        float f13;
        float f14;
        if(field_22352_G > 0)
        {
            f11 = (aoLightValueXNegZNeg + aoLightValueXNegYPosZNeg + aoLightValueZNeg + aoLightValueYPosZNeg) / 4F;
            f12 = (aoLightValueZNeg + aoLightValueYPosZNeg + aoLightValueXPosZNeg + aoLightValueXPosYPosZNeg) / 4F;
            f13 = (aoLightValueYNegZNeg + aoLightValueZNeg + aoLightValueXPosYNegZNeg + aoLightValueXPosZNeg) / 4F;
            f14 = (aoLightValueXNegYNegZNeg + aoLightValueXNegZNeg + aoLightValueYNegZNeg + aoLightValueZNeg) / 4F;
        } else
        {
            f11 = f12 = f13 = f14 = aoLightValueZNeg;
        }
        colorRedTopLeft_EastFace = colorRedBottomLeft_EastFace = colorRedBottomRight_EastFace = colorRedTopRight_EastFace = (flag3 ? f : 1.0F) * 0.8F;
        colorGreenTopLeft_EastFace = colorGreenBottomLeft_EastFace = colorGreenBottomRight_EastFace = colorGreenTopRight_EastFace = (flag3 ? f1 : 1.0F) * 0.8F;
        colorBlueTopLeft_EastFace = colorBlueBottomLeft_EastFace = colorBlueBottomRight_EastFace = colorBlueTopRight_EastFace = (flag3 ? f2 : 1.0F) * 0.8F;
        colorRedTopLeft_EastFace *= f11;
        colorGreenTopLeft_EastFace *= f11;
        colorBlueTopLeft_EastFace *= f11;
        colorRedBottomLeft_EastFace *= f12;
        colorGreenBottomLeft_EastFace *= f12;
        colorBlueBottomLeft_EastFace *= f12;
        colorRedBottomRight_EastFace *= f13;
        colorGreenBottomRight_EastFace *= f13;
        colorBlueBottomRight_EastFace *= f13;
        colorRedTopRight_EastFace *= f14;
        colorGreenTopRight_EastFace *= f14;
        colorBlueTopRight_EastFace *= f14;
        int i1 = block.getBlockTexture(iblockaccess, i, j, k, 2);
        float f15;
        float f16;
        float f17;
        float f18;
        if(field_22352_G > 0)
        {
            f15 = (aoLightValueXNegZPos + aoLightValueXNegYPosZPos + aoLightValueZPos + aoLightValueYPosZPos) / 4F;
            f18 = (aoLightValueZPos + aoLightValueYPosZPos + aoLightValueXPosZPos + aoLightValueXPosYPosZPos) / 4F;
            f17 = (aoLightValueYNegZPos + aoLightValueZPos + aoLightValueXPosYNegZPos + aoLightValueXPosZPos) / 4F;
            f16 = (aoLightValueXNegYNegZPos + aoLightValueXNegZPos + aoLightValueYNegZPos + aoLightValueZPos) / 4F;
        } else
        {
            f15 = f16 = f17 = f18 = aoLightValueZPos;
        }
        colorRedTopLeft_WestFace = colorRedBottomLeft_WestFace = colorRedBottomRight_WestFace = colorRedTopRight_WestFace = (flag4 ? f : 1.0F) * 0.8F;
        colorGreenTopLeft_WestFace = colorGreenBottomLeft_WestFace = colorGreenBottomRight_WestFace = colorGreenTopRight_WestFace = (flag4 ? f1 : 1.0F) * 0.8F;
        colorBlueTopLeft_WestFace = colorBlueBottomLeft_WestFace = colorBlueBottomRight_WestFace = colorBlueTopRight_WestFace = (flag4 ? f2 : 1.0F) * 0.8F;
        colorRedTopLeft_WestFace *= f15;
        colorGreenTopLeft_WestFace *= f15;
        colorBlueTopLeft_WestFace *= f15;
        colorRedBottomLeft_WestFace *= f16;
        colorGreenBottomLeft_WestFace *= f16;
        colorBlueBottomLeft_WestFace *= f16;
        colorRedBottomRight_WestFace *= f17;
        colorGreenBottomRight_WestFace *= f17;
        colorBlueBottomRight_WestFace *= f17;
        colorRedTopRight_WestFace *= f18;
        colorGreenTopRight_WestFace *= f18;
        colorBlueTopRight_WestFace *= f18;
        int j1 = block.getBlockTexture(iblockaccess, i, j, k, 3);
        float f19;
        float f20;
        float f21;
        float f22;
        if(field_22352_G > 0)
        {
            f22 = (aoLightValueXNegYNeg + aoLightValueXNegYNegZPos + aoLightValueXNeg + aoLightValueXNegZPos) / 4F;
            f19 = (aoLightValueXNeg + aoLightValueXNegZPos + aoLightValueXNegYPos + aoLightValueXNegYPosZPos) / 4F;
            f20 = (aoLightValueXNegZNeg + aoLightValueXNeg + aoLightValueXNegYPosZNeg + aoLightValueXNegYPos) / 4F;
            f21 = (aoLightValueXNegYNegZNeg + aoLightValueXNegYNeg + aoLightValueXNegZNeg + aoLightValueXNeg) / 4F;
        } else
        {
            f19 = f20 = f21 = f22 = aoLightValueXNeg;
        }
        colorRedTopLeft_NorthFace = colorRedBottomLeft_NorthFace = colorRedBottomRight_NorthFace = colorRedTopRight_NorthFace = (flag5 ? f : 1.0F) * 0.6F;
        colorGreenTopLeft_NorthFace = colorGreenBottomLeft_NorthFace = colorGreenBottomRight_NorthFace = colorGreenTopRight_NorthFace = (flag5 ? f1 : 1.0F) * 0.6F;
        colorBlueTopLeft_NorthFace = colorBlueBottomLeft_NorthFace = colorBlueBottomRight_NorthFace = colorBlueTopRight_NorthFace = (flag5 ? f2 : 1.0F) * 0.6F;
        colorRedTopLeft_NorthFace *= f19;
        colorGreenTopLeft_NorthFace *= f19;
        colorBlueTopLeft_NorthFace *= f19;
        colorRedBottomLeft_NorthFace *= f20;
        colorGreenBottomLeft_NorthFace *= f20;
        colorBlueBottomLeft_NorthFace *= f20;
        colorRedBottomRight_NorthFace *= f21;
        colorGreenBottomRight_NorthFace *= f21;
        colorBlueBottomRight_NorthFace *= f21;
        colorRedTopRight_NorthFace *= f22;
        colorGreenTopRight_NorthFace *= f22;
        colorBlueTopRight_NorthFace *= f22;
        int k1 = block.getBlockTexture(iblockaccess, i, j, k, 4);
        float f23;
        float f24;
        float f25;
        float f26;
        if(field_22352_G > 0)
        {
            f23 = (aoLightValueXPosYNeg + aoLightValueXPosYNegZPos + aoLightValueXPos + aoLightValueXPosZPos) / 4F;
            f26 = (aoLightValueXPos + aoLightValueXPosZPos + aoLightValueXPosYPos + aoLightValueXPosYPosZPos) / 4F;
            f25 = (aoLightValueXPosZNeg + aoLightValueXPos + aoLightValueXPosYPosZNeg + aoLightValueXPosYPos) / 4F;
            f24 = (aoLightValueXPosYNegZNeg + aoLightValueXPosYNeg + aoLightValueXPosZNeg + aoLightValueXPos) / 4F;
        } else
        {
            f23 = f24 = f25 = f26 = aoLightValueXPos;
        }
        colorRedTopLeft_SouthFace = colorRedBottomLeft_SouthFace = colorRedBottomRight_SouthFace = colorRedTopRight_SouthFace = (flag6 ? f : 1.0F) * 0.6F;
        colorGreenTopLeft_SouthFace = colorGreenBottomLeft_SouthFace = colorGreenBottomRight_SouthFace = colorGreenTopRight_SouthFace = (flag6 ? f1 : 1.0F) * 0.6F;
        colorBlueTopLeft_SouthFace = colorBlueBottomLeft_SouthFace = colorBlueBottomRight_SouthFace = colorBlueTopRight_SouthFace = (flag6 ? f2 : 1.0F) * 0.6F;
        colorRedTopLeft_SouthFace *= f23;
        colorGreenTopLeft_SouthFace *= f23;
        colorBlueTopLeft_SouthFace *= f23;
        colorRedBottomLeft_SouthFace *= f24;
        colorGreenBottomLeft_SouthFace *= f24;
        colorBlueBottomLeft_SouthFace *= f24;
        colorRedBottomRight_SouthFace *= f25;
        colorGreenBottomRight_SouthFace *= f25;
        colorBlueBottomRight_SouthFace *= f25;
        colorRedTopRight_SouthFace *= f26;
        colorGreenTopRight_SouthFace *= f26;
        colorBlueTopRight_SouthFace *= f26;
        int l1 = block.getBlockTexture(iblockaccess, i, j, k, 5);
        colorRedSlopes = f;
        colorGreenSlopes = f1;
        colorBlueSlopes = f2;
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j - 1, k, 0))
        {
            renderSlopesBottomFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j + 1, k, 1))
        {
            renderSlopesTopFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j, k - 1, 2))
        {
            renderSlopesEastFace(block, i, j, k, i1, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            if(field_27511_cfgGrassFix && i1 == 3)
            {
                colorRedTopLeft_EastFace *= f;
                colorRedBottomLeft_EastFace *= f;
                colorRedBottomRight_EastFace *= f;
                colorRedTopRight_EastFace *= f;
                colorGreenTopLeft_EastFace *= f1;
                colorGreenBottomLeft_EastFace *= f1;
                colorGreenBottomRight_EastFace *= f1;
                colorGreenTopRight_EastFace *= f1;
                colorBlueTopLeft_EastFace *= f2;
                colorBlueBottomLeft_EastFace *= f2;
                colorBlueBottomRight_EastFace *= f2;
                colorBlueTopRight_EastFace *= f2;
                renderSlopesEastFace(block, i, j, k, 38, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j, k + 1, 3))
        {
            renderSlopesWestFace(block, i, j, k, j1, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            if(field_27511_cfgGrassFix && j1 == 3)
            {
                colorRedTopLeft_WestFace *= f;
                colorRedBottomLeft_WestFace *= f;
                colorRedBottomRight_WestFace *= f;
                colorRedTopRight_WestFace *= f;
                colorGreenTopLeft_WestFace *= f1;
                colorGreenBottomLeft_WestFace *= f1;
                colorGreenBottomRight_WestFace *= f1;
                colorGreenTopRight_WestFace *= f1;
                colorBlueTopLeft_WestFace *= f2;
                colorBlueBottomLeft_WestFace *= f2;
                colorBlueBottomRight_WestFace *= f2;
                colorBlueTopRight_WestFace *= f2;
                renderSlopesWestFace(block, i, j, k, 38, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i - 1, j, k, 4))
        {
            renderSlopesNorthFace(block, i, j, k, k1, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            if(field_27511_cfgGrassFix && k1 == 3)
            {
                colorRedTopLeft_NorthFace *= f;
                colorRedBottomLeft_NorthFace *= f;
                colorRedBottomRight_NorthFace *= f;
                colorRedTopRight_NorthFace *= f;
                colorGreenTopLeft_NorthFace *= f1;
                colorGreenBottomLeft_NorthFace *= f1;
                colorGreenBottomRight_NorthFace *= f1;
                colorGreenTopRight_NorthFace *= f1;
                colorBlueTopLeft_NorthFace *= f2;
                colorBlueBottomLeft_NorthFace *= f2;
                colorBlueBottomRight_NorthFace *= f2;
                colorBlueTopRight_NorthFace *= f2;
                renderSlopesNorthFace(block, i, j, k, 38, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i + 1, j, k, 5))
        {
            renderSlopesSouthFace(block, i, j, k, l1, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            if(field_27511_cfgGrassFix && l1 == 3)
            {
                colorRedTopLeft_SouthFace *= f;
                colorRedBottomLeft_SouthFace *= f;
                colorRedBottomRight_SouthFace *= f;
                colorRedTopRight_SouthFace *= f;
                colorGreenTopLeft_SouthFace *= f1;
                colorGreenBottomLeft_SouthFace *= f1;
                colorGreenBottomRight_SouthFace *= f1;
                colorGreenTopRight_SouthFace *= f1;
                colorBlueTopLeft_SouthFace *= f2;
                colorBlueBottomLeft_SouthFace *= f2;
                colorBlueBottomRight_SouthFace *= f2;
                colorBlueTopRight_SouthFace *= f2;
                renderSlopesSouthFace(block, i, j, k, 38, l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        enableAO = false;
        return flag;
    }

    public boolean renderSlopesBlockWithColorMultiplier(Block block, int i, int j, int k, float f, float f1, float f2, 
            int l, RenderBlocks renderblocks, IBlockAccess iblockaccess)
    {
        Tessellator tessellator = Tessellator.instance;
        boolean flag = false;
        float f3 = 0.5F;
        float f4 = 1.0F;
        float f5 = 0.8F;
        float f6 = 0.6F;
        float f7 = f4 * f;
        float f8 = f4 * f1;
        float f9 = f4 * f2;
        if(block == Block.grass)
        {
            f = f1 = f2 = 1.0F;
        }
        float f10 = f3 * f;
        float f11 = f5 * f;
        float f12 = f6 * f;
        float f13 = f3 * f1;
        float f14 = f5 * f1;
        float f15 = f6 * f1;
        float f16 = f3 * f2;
        float f17 = f5 * f2;
        float f18 = f6 * f2;
        float f19 = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k);
        if((renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j - 1, k, 0)) && l / 4 != 2)
        {
            float f20 = block.getAmbientOcclusionLightValue(iblockaccess, i, j - 1, k);
            tessellator.setColorOpaque_F(f10 * f20, f13 * f20, f16 * f20);
            renderSlopesBottomFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            flag = true;
        }
        if((renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j + 1, k, 1)) && l / 4 != 1)
        {
            float f21 = block.getAmbientOcclusionLightValue(iblockaccess, i, j + 1, k);
            if(block.maxY != 1.0D && !block.blockMaterial.getIsLiquid())
            {
                f21 = f19;
            }
            tessellator.setColorOpaque_F(f7 * f21, f8 * f21, f9 * f21);
            renderSlopesTopFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 1), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j, k - 1, 2) || l == 6 || l == 10 || l == 12)
        {
            if(l == 6)
            {
                float f22 = f19;
                tessellator.setColorOpaque_F(f11 * f22, f14 * f22, f17 * f22);
                renderSlopesEastFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 1), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 10)
            {
                float f23 = f19;
                tessellator.setColorOpaque_F(f11 * f23, f14 * f23, f17 * f23);
                renderSlopesEastFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 12)
            {
                float f24 = f19;
                tessellator.setColorOpaque_F(f11 * f24, f14 * f24, f17 * f24);
                renderSlopesEastFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 2), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            {
                float f25 = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k - 1);
                tessellator.setColorOpaque_F(f11 * f25, f14 * f25, f17 * f25);
                renderSlopesEastFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 2), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i, j, k + 1, 3) || l == 7 || l == 11 || l == 13)
        {
            if(l == 7)
            {
                float f26 = f19;
                tessellator.setColorOpaque_F(f11 * f26, f14 * f26, f17 * f26);
                renderSlopesWestFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 1), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 11)
            {
                float f27 = f19;
                tessellator.setColorOpaque_F(f11 * f27, f14 * f27, f17 * f27);
                renderSlopesWestFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 13)
            {
                float f28 = f19;
                tessellator.setColorOpaque_F(f11 * f28, f14 * f28, f17 * f28);
                renderSlopesWestFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 3), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            {
                float f29 = block.getAmbientOcclusionLightValue(iblockaccess, i, j, k + 1);
                tessellator.setColorOpaque_F(f11 * f29, f14 * f29, f17 * f29);
                renderSlopesWestFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 3), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i - 1, j, k, 4) || l == 4 || l == 8 || l == 15)
        {
            if(l == 4)
            {
                float f30 = f19;
                tessellator.setColorOpaque_F(f12 * f30, f15 * f30, f18 * f30);
                renderSlopesNorthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 1), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 8)
            {
                float f31 = f19;
                tessellator.setColorOpaque_F(f12 * f31, f15 * f31, f18 * f31);
                renderSlopesNorthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 15)
            {
                float f32 = f19;
                tessellator.setColorOpaque_F(f12 * f32, f15 * f32, f18 * f32);
                renderSlopesNorthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 4), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            {
                float f33 = block.getAmbientOcclusionLightValue(iblockaccess, i - 1, j, k);
                tessellator.setColorOpaque_F(f12 * f33, f15 * f33, f18 * f33);
                renderSlopesNorthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 4), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        if(renderblocks.renderAllFaces || block.shouldSideBeRendered(iblockaccess, i + 1, j, k, 5) || l == 5 || l == 9 || l == 14)
        {
            if(l == 5)
            {
                float f34 = f19;
                tessellator.setColorOpaque_F(f12 * f34, f15 * f34, f18 * f34);
                renderSlopesSouthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 1), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 9)
            {
                float f35 = f19;
                tessellator.setColorOpaque_F(f12 * f35, f15 * f35, f18 * f35);
                renderSlopesSouthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 0), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            if(l == 14)
            {
                float f36 = f19;
                tessellator.setColorOpaque_F(f12 * f36, f15 * f36, f18 * f36);
                renderSlopesSouthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 5), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            } else
            {
                float f37 = block.getAmbientOcclusionLightValue(iblockaccess, i + 1, j, k);
                tessellator.setColorOpaque_F(f12 * f37, f15 * f37, f18 * f37);
                renderSlopesSouthFace(block, i, j, k, block.getBlockTexture(iblockaccess, i, j, k, 5), l, renderblocks, block.getMixedBrightnessForBlock(iblockaccess, i, j, k));
            }
            flag = true;
        }
        return flag;
    }

    public void renderSlopesBottomFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minX * 16D) / 256D;
        double d4 = (((double)l + block.maxX * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minZ * 16D) / 256D;
        double d6 = (((double)i1 + block.maxZ * 16D) - 0.01D) / 256D;
        if(block.minX < 0.0D || block.maxX > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minZ < 0.0D || block.maxZ > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d7 = d + block.minX;
        double d8 = d + block.maxX;
        double d9 = d1 + block.minY;
        double d10 = d2 + block.minZ;
        double d11 = d2 + block.maxZ;
        if(enableAO)
        {
            if(j == 4 || j == 5 || j == 6 || j == 7)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_BottomFace, colorGreenTopLeft_BottomFace, colorBlueTopLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_BottomFace, colorGreenBottomLeft_BottomFace, colorBlueBottomLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_BottomFace, colorGreenBottomRight_BottomFace, colorBlueBottomRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_BottomFace, colorGreenTopRight_BottomFace, colorBlueTopRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            } else
            if(j == 12)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_BottomFace, colorGreenTopLeft_BottomFace, colorBlueTopLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_BottomFace, colorGreenBottomRight_BottomFace, colorBlueBottomRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_BottomFace, colorGreenBottomRight_BottomFace, colorBlueBottomRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_BottomFace, colorGreenTopRight_BottomFace, colorBlueTopRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            } else
            if(j == 13)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_BottomFace, colorGreenTopLeft_BottomFace, colorBlueTopLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_BottomFace, colorGreenBottomLeft_BottomFace, colorBlueBottomLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_BottomFace, colorGreenBottomRight_BottomFace, colorBlueBottomRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopLeft_BottomFace, colorGreenTopLeft_BottomFace, colorBlueTopLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            } else
            if(j == 14)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_BottomFace, colorGreenTopLeft_BottomFace, colorBlueTopLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_BottomFace, colorGreenBottomLeft_BottomFace, colorBlueBottomLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_BottomFace, colorGreenTopRight_BottomFace, colorBlueTopRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_BottomFace, colorGreenTopRight_BottomFace, colorBlueTopRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            } else
            if(j == 15)
            {
                tessellator.setColorOpaque_F(colorRedBottomLeft_BottomFace, colorGreenBottomLeft_BottomFace, colorBlueBottomLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_BottomFace, colorGreenBottomLeft_BottomFace, colorBlueBottomLeft_BottomFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_BottomFace, colorGreenBottomRight_BottomFace, colorBlueBottomRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_BottomFace, colorGreenTopRight_BottomFace, colorBlueTopRight_BottomFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            }
        } else
        if(j == 4 || j == 5 || j == 6 || j == 7)
        {
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
        } else
        if(j == 12)
        {
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
        } else
        if(j == 13)
        {
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
        } else
        if(j == 14)
        {
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
        } else
        if(j == 15)
        {
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
        }
    }

    public void renderSlopesTopFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minX * 16D) / 256D;
        double d4 = (((double)l + block.maxX * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minZ * 16D) / 256D;
        double d6 = (((double)i1 + block.maxZ * 16D) - 0.01D) / 256D;
        if(block.minX < 0.0D || block.maxX > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minZ < 0.0D || block.maxZ > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d7 = d + block.minX;
        double d8 = d + block.maxX;
        double d9 = d1 + block.maxY;
        double d10 = d2 + block.minZ;
        double d11 = d2 + block.maxZ;
        if(enableAO)
        {
            if(j == 8 || j == 9 || j == 10 || j == 11)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_TopFace, colorGreenTopLeft_TopFace, colorBlueTopLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_TopFace, colorGreenBottomLeft_TopFace, colorBlueBottomLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_TopFace, colorGreenBottomRight_TopFace, colorBlueBottomRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_TopFace, colorGreenTopRight_TopFace, colorBlueTopRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            } else
            if(j == 12)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_TopFace, colorGreenTopLeft_TopFace, colorBlueTopLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_TopFace, colorGreenBottomLeft_TopFace, colorBlueBottomLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_TopFace, colorGreenTopRight_TopFace, colorBlueTopRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_TopFace, colorGreenTopRight_TopFace, colorBlueTopRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            } else
            if(j == 13)
            {
                tessellator.setColorOpaque_F(colorRedBottomLeft_TopFace, colorGreenBottomLeft_TopFace, colorBlueBottomLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_TopFace, colorGreenBottomLeft_TopFace, colorBlueBottomLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_TopFace, colorGreenBottomRight_TopFace, colorBlueBottomRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_TopFace, colorGreenTopRight_TopFace, colorBlueTopRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            } else
            if(j == 14)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_TopFace, colorGreenTopLeft_TopFace, colorBlueTopLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_TopFace, colorGreenBottomRight_TopFace, colorBlueBottomRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_TopFace, colorGreenBottomRight_TopFace, colorBlueBottomRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_TopFace, colorGreenTopRight_TopFace, colorBlueTopRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            } else
            if(j == 15)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_TopFace, colorGreenTopLeft_TopFace, colorBlueTopLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_TopFace, colorGreenBottomLeft_TopFace, colorBlueBottomLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_TopFace, colorGreenBottomRight_TopFace, colorBlueBottomRight_TopFace);
                tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopLeft_TopFace, colorGreenTopLeft_TopFace, colorBlueTopLeft_TopFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            }
        } else
        if(j == 8 || j == 9 || j == 10 || j == 11)
        {
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
        } else
        if(j == 12)
        {
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
        } else
        if(j == 13)
        {
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
        } else
        if(j == 14)
        {
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
        } else
        if(j == 15)
        {
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
            tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
        }
    }

    public void renderSlopesEastFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minX * 16D) / 256D;
        double d4 = (((double)l + block.maxX * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minY * 16D) / 256D;
        double d6 = (((double)i1 + block.maxY * 16D) - 0.01D) / 256D;
        if(renderblocks.flipTexture)
        {
            double d7 = d3;
            d3 = d4;
            d4 = d7;
        }
        if(block.minX < 0.0D || block.maxX > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minY < 0.0D || block.maxY > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d8 = d + block.minX;
        double d9 = d + block.maxX;
        double d10 = d1 + block.minY;
        double d11 = d1 + block.maxY;
        double d12 = d2 + block.minZ;
        double d13 = d2 + block.maxZ;
        if(enableAO)
        {
            if(j == 7 || j == 11 || j == 13 || j == 15)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_EastFace, colorGreenTopLeft_EastFace, colorBlueTopLeft_EastFace);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_EastFace, colorGreenBottomLeft_EastFace, colorBlueBottomLeft_EastFace);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_EastFace, colorGreenBottomRight_EastFace, colorBlueBottomRight_EastFace);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_EastFace, colorGreenTopRight_EastFace, colorBlueTopRight_EastFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            } else
            if(j == 4)
            {
                tessellator.setColorOpaque_F(colorRedTopRight_EastFace, colorGreenTopRight_EastFace, colorBlueTopRight_EastFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_EastFace, colorGreenBottomLeft_EastFace, colorBlueBottomLeft_EastFace);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_EastFace, colorGreenBottomRight_EastFace, colorBlueBottomRight_EastFace);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_EastFace, colorGreenTopRight_EastFace, colorBlueTopRight_EastFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            } else
            if(j == 5)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_EastFace, colorGreenTopLeft_EastFace, colorBlueTopLeft_EastFace);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_EastFace, colorGreenBottomRight_EastFace, colorBlueBottomRight_EastFace);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_EastFace, colorGreenBottomRight_EastFace, colorBlueBottomRight_EastFace);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_EastFace, colorGreenTopRight_EastFace, colorBlueTopRight_EastFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            } else
            if(j == 6)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d13, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d13, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorTop + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorTop + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorTop + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorTop + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorTop + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorTop + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            } else
            if(j == 8)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_EastFace, colorGreenTopLeft_EastFace, colorBlueTopLeft_EastFace);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_EastFace, colorGreenBottomLeft_EastFace, colorBlueBottomLeft_EastFace);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_EastFace, colorGreenBottomRight_EastFace, colorBlueBottomRight_EastFace);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopLeft_EastFace, colorGreenTopLeft_EastFace, colorBlueTopLeft_EastFace);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            } else
            if(j == 9)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_EastFace, colorGreenTopLeft_EastFace, colorBlueTopLeft_EastFace);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_EastFace, colorGreenBottomLeft_EastFace, colorBlueBottomLeft_EastFace);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_EastFace, colorGreenBottomLeft_EastFace, colorBlueBottomLeft_EastFace);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_EastFace, colorGreenTopRight_EastFace, colorBlueTopRight_EastFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            } else
            if(j == 10)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorBottom + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorBottom + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueXNegZNeg) * (factorBottom + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorBottom + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorBottom + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueXPosZNeg) * (factorBottom + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d13, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d13, d4, d6);
            } else
            if(j == 12)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorNorth + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorNorth + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorNorth + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d13, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorNorth + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorNorth + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorNorth + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorNorth + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorNorth + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorNorth + factorEast)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorNorth + factorEast)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorNorth + factorEast)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorNorth + factorEast)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d13, d4, d6);
            }
        } else
        if(j == 7 || j == 11 || j == 13 || j == 15)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
        } else
        if(j == 4)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
        } else
        if(j == 5)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
        } else
        if(j == 6)
        {
            tessellator.addVertexWithUV(d8, d11, d13, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d13, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
        } else
        if(j == 8)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
        } else
        if(j == 9)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
        } else
        if(j == 10)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d13, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d13, d4, d6);
        } else
        if(j == 12)
        {
            tessellator.addVertexWithUV(d8, d11, d13, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d13, d4, d6);
        }
    }

    public void renderSlopesWestFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minX * 16D) / 256D;
        double d4 = (((double)l + block.maxX * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minY * 16D) / 256D;
        double d6 = (((double)i1 + block.maxY * 16D) - 0.01D) / 256D;
        if(renderblocks.flipTexture)
        {
            double d7 = d3;
            d3 = d4;
            d4 = d7;
        }
        if(block.minX < 0.0D || block.maxX > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minY < 0.0D || block.maxY > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d8 = d + block.minX;
        double d9 = d + block.maxX;
        double d10 = d1 + block.minY;
        double d11 = d1 + block.maxY;
        double d12 = d2 + block.maxZ;
        double d13 = d2 + block.minZ;
        if(enableAO)
        {
            if(j == 6 || j == 10 || j == 12 || j == 14)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_WestFace, colorGreenTopLeft_WestFace, colorBlueTopLeft_WestFace);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_WestFace, colorGreenBottomLeft_WestFace, colorBlueBottomLeft_WestFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_WestFace, colorGreenBottomRight_WestFace, colorBlueBottomRight_WestFace);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_WestFace, colorGreenTopRight_WestFace, colorBlueTopRight_WestFace);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            } else
            if(j == 4)
            {
                tessellator.setColorOpaque_F(colorRedBottomLeft_WestFace, colorGreenBottomLeft_WestFace, colorBlueBottomLeft_WestFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_WestFace, colorGreenBottomLeft_WestFace, colorBlueBottomLeft_WestFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_WestFace, colorGreenBottomRight_WestFace, colorBlueBottomRight_WestFace);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_WestFace, colorGreenTopRight_WestFace, colorBlueTopRight_WestFace);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            } else
            if(j == 5)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_WestFace, colorGreenTopLeft_WestFace, colorBlueTopLeft_WestFace);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_WestFace, colorGreenBottomLeft_WestFace, colorBlueBottomLeft_WestFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_WestFace, colorGreenBottomRight_WestFace, colorBlueBottomRight_WestFace);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_WestFace, colorGreenBottomRight_WestFace, colorBlueBottomRight_WestFace);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            } else
            if(j == 7)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueXNegYPos) * (factorTop + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d13, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorTop + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorTop + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorTop + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorTop + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorTop + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorTop + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueXPosYPos) * (factorTop + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d13, d4, d5);
            } else
            if(j == 8)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_WestFace, colorGreenTopLeft_WestFace, colorBlueTopLeft_WestFace);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopLeft_WestFace, colorGreenTopLeft_WestFace, colorBlueTopLeft_WestFace);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_WestFace, colorGreenBottomRight_WestFace, colorBlueBottomRight_WestFace);
                tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_WestFace, colorGreenTopRight_WestFace, colorBlueTopRight_WestFace);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            } else
            if(j == 9)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_WestFace, colorGreenTopLeft_WestFace, colorBlueTopLeft_WestFace);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_WestFace, colorGreenBottomLeft_WestFace, colorBlueBottomLeft_WestFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_WestFace, colorGreenTopRight_WestFace, colorBlueTopRight_WestFace);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_WestFace, colorGreenTopRight_WestFace, colorBlueTopRight_WestFace);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            } else
            if(j == 11)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorBottom + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorBottom + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueXNegZPos) * (factorBottom + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueXNegYNeg) * (factorBottom + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d13, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueXPosYNeg) * (factorBottom + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d13, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorBottom + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorBottom + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueXPosZPos) * (factorBottom + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            } else
            if(j == 13)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorSouth + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorSouth + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorSouth + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorSouth + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorSouth + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorSouth + factorWest)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorSouth + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorSouth + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorSouth + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d10, d13, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorSouth + factorWest)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorSouth + factorWest)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorSouth + factorWest)) / 4F);
                tessellator.addVertexWithUV(d9, d11, d13, d4, d5);
            }
        } else
        if(j == 6 || j == 10 || j == 12 || j == 14)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
        } else
        if(j == 4)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
        } else
        if(j == 5)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
        } else
        if(j == 7)
        {
            tessellator.addVertexWithUV(d8, d11, d13, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d13, d4, d5);
        } else
        if(j == 8)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
        } else
        if(j == 9)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
        } else
        if(j == 11)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d13, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d13, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
        } else
        if(j == 13)
        {
            tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
            tessellator.addVertexWithUV(d9, d10, d13, d4, d6);
            tessellator.addVertexWithUV(d9, d11, d13, d4, d5);
        }
    }

    public void renderSlopesNorthFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minZ * 16D) / 256D;
        double d4 = (((double)l + block.maxZ * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minY * 16D) / 256D;
        double d6 = (((double)i1 + block.maxY * 16D) - 0.01D) / 256D;
        if(renderblocks.flipTexture)
        {
            double d7 = d3;
            d3 = d4;
            d4 = d7;
        }
        if(block.minZ < 0.0D || block.maxZ > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minY < 0.0D || block.maxY > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d8 = d + block.minX;
        double d9 = d1 + block.minY;
        double d10 = d1 + block.maxY;
        double d11 = d2 + block.minZ;
        double d12 = d2 + block.maxZ;
        double d13 = d + block.maxX;
        if(enableAO)
        {
            if(j == 5 || j == 9 || j == 13 || j == 14)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_NorthFace, colorGreenTopLeft_NorthFace, colorBlueTopLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_NorthFace, colorGreenBottomLeft_NorthFace, colorBlueBottomLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_NorthFace, colorGreenBottomRight_NorthFace, colorBlueBottomRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_NorthFace, colorGreenTopRight_NorthFace, colorBlueTopRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            } else
            if(j == 4)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d12, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d11, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorTop + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorTop + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorTop + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorTop + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorTop + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorTop + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            } else
            if(j == 6)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_NorthFace, colorGreenTopLeft_NorthFace, colorBlueTopLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_NorthFace, colorGreenBottomRight_NorthFace, colorBlueBottomRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_NorthFace, colorGreenBottomRight_NorthFace, colorBlueBottomRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_NorthFace, colorGreenTopRight_NorthFace, colorBlueTopRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            } else
            if(j == 7)
            {
                tessellator.setColorOpaque_F(colorRedTopRight_NorthFace, colorGreenTopRight_NorthFace, colorBlueTopRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_NorthFace, colorGreenBottomLeft_NorthFace, colorBlueBottomLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_NorthFace, colorGreenBottomRight_NorthFace, colorBlueBottomRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_NorthFace, colorGreenTopRight_NorthFace, colorBlueTopRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            } else
            if(j == 8)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorBottom + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorBottom + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegZPos) * (factorBottom + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorBottom + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorBottom + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegZNeg) * (factorBottom + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d11, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d12, d4, d6);
            } else
            if(j == 10)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_NorthFace, colorGreenTopLeft_NorthFace, colorBlueTopLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_NorthFace, colorGreenBottomLeft_NorthFace, colorBlueBottomLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_NorthFace, colorGreenBottomLeft_NorthFace, colorBlueBottomLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_NorthFace, colorGreenTopRight_NorthFace, colorBlueTopRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            } else
            if(j == 11)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_NorthFace, colorGreenTopLeft_NorthFace, colorBlueTopLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_NorthFace, colorGreenBottomLeft_NorthFace, colorBlueBottomLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_NorthFace, colorGreenBottomRight_NorthFace, colorBlueBottomRight_NorthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F(colorRedTopLeft_NorthFace, colorGreenTopLeft_NorthFace, colorBlueTopLeft_NorthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            } else
            if(j == 15)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorWest + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorWest + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueYPosZPos) * (factorWest + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d12, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorWest + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorWest + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegYPos) * (factorWest + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorWest + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorWest + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueXNeg + aoLightValueXNegYNeg) * (factorWest + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorWest + factorNorth)) / 4F, (colorGreenSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorWest + factorNorth)) / 4F, (colorBlueSlopes * (aoLightValueZPos + aoLightValueYNegZPos) * (factorWest + factorNorth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d12, d4, d6);
            }
        } else
        if(j == 5 || j == 9 || j == 13 || j == 14)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
        } else
        if(j == 4)
        {
            tessellator.addVertexWithUV(d13, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d13, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
        } else
        if(j == 6)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
        } else
        if(j == 7)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
        } else
        if(j == 8)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d13, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d13, d9, d12, d4, d6);
        } else
        if(j == 10)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
        } else
        if(j == 11)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
        } else
        if(j == 15)
        {
            tessellator.addVertexWithUV(d13, d10, d12, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
            tessellator.addVertexWithUV(d13, d9, d12, d4, d6);
        }
    }

    public void renderSlopesSouthFace(Block block, double d, double d1, double d2, 
            int i, int j, RenderBlocks renderblocks, int k)
    {
        Tessellator tessellator = Tessellator.instance;
        tessellator.setBrightness(k);
        if(renderblocks.overrideBlockTexture >= 0)
        {
            i = renderblocks.overrideBlockTexture;
        }
        int l = (i & 0xf) << 4;
        int i1 = i & 0xf0;
        double d3 = ((double)l + block.minZ * 16D) / 256D;
        double d4 = (((double)l + block.maxZ * 16D) - 0.01D) / 256D;
        double d5 = ((double)i1 + block.minY * 16D) / 256D;
        double d6 = (((double)i1 + block.maxY * 16D) - 0.01D) / 256D;
        if(renderblocks.flipTexture)
        {
            double d7 = d3;
            d3 = d4;
            d4 = d7;
        }
        if(block.minZ < 0.0D || block.maxZ > 1.0D)
        {
            d3 = ((float)l + 0.0F) / 256F;
            d4 = ((float)l + 15.99F) / 256F;
        }
        if(block.minY < 0.0D || block.maxY > 1.0D)
        {
            d5 = ((float)i1 + 0.0F) / 256F;
            d6 = ((float)i1 + 15.99F) / 256F;
        }
        double d8 = d + block.maxX;
        double d9 = d1 + block.minY;
        double d10 = d1 + block.maxY;
        double d11 = d2 + block.minZ;
        double d12 = d2 + block.maxZ;
        double d13 = d + block.minX;
        if(enableAO)
        {
            if(j == 4 || j == 8 || j == 12 || j == 15)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_SouthFace, colorGreenTopLeft_SouthFace, colorBlueTopLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_SouthFace, colorGreenBottomLeft_SouthFace, colorBlueBottomLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_SouthFace, colorGreenBottomRight_SouthFace, colorBlueBottomRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_SouthFace, colorGreenTopRight_SouthFace, colorBlueTopRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            } else
            if(j == 5)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorTop + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorTop + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorTop + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorTop + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorTop + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorTop + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueYPosZNeg) * (factorTop + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d11, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueYPos + aoLightValueYPosZPos) * (factorTop + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d12, d3, d5);
            } else
            if(j == 6)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_SouthFace, colorGreenTopLeft_SouthFace, colorBlueTopLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_SouthFace, colorGreenBottomLeft_SouthFace, colorBlueBottomLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_SouthFace, colorGreenBottomLeft_SouthFace, colorBlueBottomLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedTopRight_SouthFace, colorGreenTopRight_SouthFace, colorBlueTopRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            } else
            if(j == 7)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_SouthFace, colorGreenTopLeft_SouthFace, colorBlueTopLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomLeft_SouthFace, colorGreenBottomLeft_SouthFace, colorBlueBottomLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_SouthFace, colorGreenBottomRight_SouthFace, colorBlueBottomRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopLeft_SouthFace, colorGreenTopLeft_SouthFace, colorBlueTopLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            } else
            if(j == 9)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueYNegZPos) * (factorBottom + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueYNeg + aoLightValueYNegZNeg) * (factorBottom + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d11, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorBottom + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorBottom + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosZNeg) * (factorBottom + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorBottom + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorBottom + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosZPos) * (factorBottom + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            } else
            if(j == 10)
            {
                tessellator.setColorOpaque_F(colorRedTopLeft_SouthFace, colorGreenTopLeft_SouthFace, colorBlueTopLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_SouthFace, colorGreenBottomRight_SouthFace, colorBlueBottomRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F(colorRedBottomRight_SouthFace, colorGreenBottomRight_SouthFace, colorBlueBottomRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_SouthFace, colorGreenTopRight_SouthFace, colorBlueTopRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            } else
            if(j == 11)
            {
                tessellator.setColorOpaque_F(colorRedTopRight_SouthFace, colorGreenTopRight_SouthFace, colorBlueTopRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
                tessellator.setColorOpaque_F(colorRedBottomLeft_SouthFace, colorGreenBottomLeft_SouthFace, colorBlueBottomLeft_SouthFace);
                tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
                tessellator.setColorOpaque_F(colorRedBottomRight_SouthFace, colorGreenBottomRight_SouthFace, colorBlueBottomRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
                tessellator.setColorOpaque_F(colorRedTopRight_SouthFace, colorGreenTopRight_SouthFace, colorBlueTopRight_SouthFace);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            } else
            if(j == 14)
            {
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorEast + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorEast + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosYNeg) * (factorEast + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorEast + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorEast + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueYNegZNeg) * (factorEast + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d9, d11, d4, d6);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorEast + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorEast + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueZNeg + aoLightValueYPosZNeg) * (factorEast + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d13, d10, d11, d4, d5);
                tessellator.setColorOpaque_F((colorRedSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorEast + factorSouth)) / 4F, (colorGreenSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorEast + factorSouth)) / 4F, (colorBlueSlopes * (aoLightValueXPos + aoLightValueXPosYPos) * (factorEast + factorSouth)) / 4F);
                tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            }
        } else
        if(j == 4 || j == 8 || j == 12 || j == 15)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        } else
        if(j == 5)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d13, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d13, d10, d12, d3, d5);
        } else
        if(j == 6)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        } else
        if(j == 7)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
        } else
        if(j == 9)
        {
            tessellator.addVertexWithUV(d13, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d13, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        } else
        if(j == 10)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        } else
        if(j == 11)
        {
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
            tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        } else
        if(j == 14)
        {
            tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
            tessellator.addVertexWithUV(d13, d9, d11, d4, d6);
            tessellator.addVertexWithUV(d13, d10, d11, d4, d5);
            tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
        }
    }

   
}
