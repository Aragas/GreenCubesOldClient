package net.minecraft.src;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import net.minecraft.client.Minecraft;

import org.greencubes.downloader.Downloader;
import org.greencubes.launcher.Main;

public class abpa extends Thread {
	
	private final NetClientHandler netClientHandler;
	private final INetworkManager netManager;
	private final Packet2Handshake packet2handshake;
	
	public abpa(NetClientHandler netClientHandler, INetworkManager netManager, Packet2Handshake packet2handshake) {
		this.netClientHandler = netClientHandler;
		this.netManager = netManager;
		this.packet2handshake = packet2handshake;
	}
	
	@Override
	public void run() {
		final Minecraft mc = Minecraft.theMinecraft;
		do {
			try {
				Scanner sc = new Scanner(new File(Minecraft.getAppDir("greencubes") + File.separator + "s.txt"));
				ArrayList<String> logins = new ArrayList<String>();
				while(sc.hasNextLine()) {
					String[] sp = sc.nextLine().split(":");
					if(sp[0].equals("login")) {
						String[] ls = sp[1].split(",");
						for(int i = 0; i < ls.length; ++i)
							logins.add(ls[i].trim());
						break;
					}
				}
				String[] split = mc.session.sessionId.split("-");
				String server = logins.get(Integer.valueOf(split[0]) - 1);
				System.out.println("Authorizing on " + server + "...");
				long start = System.currentTimeMillis();
				Downloader downloader = new Downloader("https://" + server);
				final String answer = downloader.readURL("/mc/auth2.php?user=" + mc.session.username + "&sessionId=" + split[1] + "&serverId=" + packet2handshake.username);
				if(!answer.equalsIgnoreCase("ok")) {
					mc.queueTask(new Runnable() {
						@Override
						public void run() {
							System.out.println("Auth failed: " + answer);
							netManager.networkShutdown("disconnect.loginFailedInfo", new Object[]{answer});
						}
					});
					return;
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		} while(false);
		netClientHandler.connectionStatus = "Àâòîðèçàöèÿ (2)";
		mc.queueTask(new Runnable() {
			@Override
			public void run() {
				netClientHandler.connectionStatus = "Àâòîðèçàöèÿ (îæèäàíèå îòâåòà)";
				/*
				 * ØÈÔÐÎÂÀÍÈÅ ÍÓÆÍÎ ØÈÔÐÎÂÀÒÜ ÂÑÅ ÊÎÄ ÑÀÌ ÑÅÁß ÍÅ ÇÀØÈÔÐÓÅÒ ß ÎÁÔÓÑÖÈÐÓÞ È ÇÀÏÓÒÛÂÀÞ ÊÎÄ ÏÐßÌÎ ÂÎ ÂÐÅÌß ÍÀÏÈÑÀÍÈß
				 * ÍÈÊÒÎ ÍÅ ÄÎËÆÅÍ ÏÎÍÈÌÀÒÜ ÊÎÄ ÄÀÆÅ ß ß ÈÑÏÎËÜÇÓÞ ÐÅÔËÅÊØÍ ÃÄÅ ÒÎËÜÊÎ ÌÎÆÍÎ ×ÅÌ ÌÅÍÅÅ ÏÎÍßÒÅÍ ÊÎÄ ÒÅÌ ËÓ×ØÅ ÄÀÆÅ
				 * ß ÍÅ ÄÎËÆÍÀ ÅÃÎ ÏÎÍÈÌÀÒÜ ×ÈÒÅÐÛ ÒÎ×ÍÎ ÍÅ ÏÎÉÌÓÒ ÕÀÕÀÕÀ ÒÓÏÛÅ ÓÁËÞÄÊÈ
				 */
				try {
					Class c;
					try {
						c = Class.forName("net.minecraft.src.Packet221ConnectionReady");
					} catch(Exception e) {
						c = Class.forName("Packet221ConnectionReady");
					}
					Object o = c.newInstance();
					c.getField("c1").set(o, Class.forName("net.minecraft.client.Minecraft").getMethod("hh").invoke(mc));
					c.getField("c2").set(o, Class.forName("net.minecraft.client.Minecraft").getMethod("af").invoke(null));
					try {
						netClientHandler.getClass().getMethod("addToSendQueue", Packet.class).invoke(netClientHandler, o);
					} catch(Exception e) {
						netClientHandler.getClass().getMethod("c", Packet.class).invoke(netClientHandler, o);
					}
				} catch(Exception e) {
					Error e1 = new Error("File corruption");
					e1.setStackTrace(null);
					throw e1;
				}
			}
		});
		
	}
}
