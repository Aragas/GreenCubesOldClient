// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces deadcode fieldsfirst 

package net.minecraft.src;

import java.util.List;
import net.minecraft.client.Minecraft;
import org.lwjgl.opengl.GL11;

// Referenced classes of package net.minecraft.src:
//            GuiScreen, TMIController, EntityPlayerSP, RenderHelper, 
//            OpenGlHelper, Container, Slot, InventoryPlayer, 
//            TMIUtils, RenderItem, TMIConfig, FontRenderer, 
//            RenderEngine, PlayerController, GameSettings, KeyBinding, 
//            ItemStack, Item

public abstract class GuiContainer extends GuiScreen
{

    protected static RenderItem itemRenderer = new RenderItem();
    protected int xSize;
    protected int ySize;
    public Container inventorySlots;
    protected int field_40216_e;
    protected int field_40215_f;
    private TMIController tmi;

    public GuiContainer(Container container)
    {
        xSize = 176;
        ySize = 166;
        tmi = null;
        inventorySlots = container;
        tmi = new TMIController(this, itemRenderer);
    }

    public void initGui()
    {
        super.initGui();
        mc.thePlayer.craftingInventory = inventorySlots;
        field_40216_e = (width - xSize) / 2;
        field_40215_f = (height - ySize) / 2;
    }

    public void drawScreen(int i, int j, float f)
    {
        field_40216_e = (width - xSize) / 2;
        field_40215_f = (height - ySize) / 2;
        drawDefaultBackground();
        int k = field_40216_e;
        int l = field_40215_f;
        drawGuiContainerBackgroundLayer(f, i, j);
        RenderHelper.func_41089_c();
        GL11.glPushMatrix();
        GL11.glTranslatef(k, l, 0.0F);
        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
        GL11.glEnable(32826 /*GL_RESCALE_NORMAL_EXT*/);
        Slot slot = null;
        int i1 = 240;
        int j1 = 240;
        OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapEnabled, (float)i1 / 1.0F, (float)j1 / 1.0F);
        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
        tmi.onEnterFrame(i, j, xSize, ySize);
        for(int i2 = 0; i2 < inventorySlots.inventorySlots.size(); i2++)
        {
            Slot slot1 = (Slot)inventorySlots.inventorySlots.get(i2);
            drawSlotInventory(slot1);
            if(getIsMouseOverSlot(slot1, i, j))
            {
                slot = slot1;
                GL11.glDisable(2896 /*GL_LIGHTING*/);
                GL11.glDisable(2929 /*GL_DEPTH_TEST*/);
                int j2 = slot1.xDisplayPosition;
                int k1 = slot1.yDisplayPosition;
                drawGradientRect(j2, k1, j2 + 16, k1 + 16, 0x80ffffff, 0x80ffffff);
                GL11.glEnable(2896 /*GL_LIGHTING*/);
                GL11.glEnable(2929 /*GL_DEPTH_TEST*/);
            }
        }

        InventoryPlayer inventoryplayer = mc.thePlayer.inventory;
        if(inventoryplayer.getItemStack() != null)
        {
            ItemStack itemstack = TMIUtils.getValidItem(inventoryplayer.getItemStack());
            GL11.glTranslatef(0.0F, 0.0F, 32F);
            zLevel = 200F;
            itemRenderer.field_40268_b = 200F;
            itemRenderer.renderItemIntoGUI(fontRenderer, mc.renderEngine, itemstack, i - k - 8, j - l - 8);
            itemRenderer.renderItemOverlayIntoGUI(fontRenderer, mc.renderEngine, itemstack, i - k - 8, j - l - 8);
            zLevel = 0.0F;
            itemRenderer.field_40268_b = 0.0F;
        }
        GL11.glDisable(32826 /*GL_RESCALE_NORMAL_EXT*/);
        RenderHelper.disableStandardItemLighting();
        GL11.glDisable(2896 /*GL_LIGHTING*/);
        GL11.glDisable(2929 /*GL_DEPTH_TEST*/);
        drawGuiContainerForegroundLayer();
        if(!tmi.showToolTip(i, j) && inventoryplayer.getItemStack() == null && slot != null && slot.getHasStack())
        {
            ItemStack itemstack1 = slot.getStack();
            List list = TMIUtils.itemDisplayNameMultiline(slot.getStack(), TMIConfig.getInstance().isEnabled());
            if(list.size() > 0)
            {
                int l1 = 0;
                for(int k2 = 0; k2 < list.size(); k2++)
                {
                    int i3 = fontRenderer.getStringWidth((String)list.get(k2));
                    if(i3 > l1)
                    {
                        l1 = i3;
                    }
                }

                int l2 = (i - k) + 12;
                int j3 = j - l - 12;
                int k3 = 8;
                if(list.size() > 1)
                {
                    k3 += 2 + (list.size() - 1) * 10;
                }
                zLevel = 300F;
                itemRenderer.field_40268_b = 300F;
                int l3 = 0xf0100010;
                drawGradientRect(l2 - 3, j3 - 4, l2 + l1 + 3, j3 - 3, l3, l3);
                drawGradientRect(l2 - 3, j3 + k3 + 3, l2 + l1 + 3, j3 + k3 + 4, l3, l3);
                drawGradientRect(l2 - 3, j3 - 3, l2 + l1 + 3, j3 + k3 + 3, l3, l3);
                drawGradientRect(l2 - 4, j3 - 3, l2 - 3, j3 + k3 + 3, l3, l3);
                drawGradientRect(l2 + l1 + 3, j3 - 3, l2 + l1 + 4, j3 + k3 + 3, l3, l3);
                int i4 = 0x505000ff;
                int j4 = (i4 & 0xfefefe) >> 1 | i4 & 0xff000000;
                drawGradientRect(l2 - 3, (j3 - 3) + 1, (l2 - 3) + 1, (j3 + k3 + 3) - 1, i4, j4);
                drawGradientRect(l2 + l1 + 2, (j3 - 3) + 1, l2 + l1 + 3, (j3 + k3 + 3) - 1, i4, j4);
                drawGradientRect(l2 - 3, j3 - 3, l2 + l1 + 3, (j3 - 3) + 1, i4, i4);
                drawGradientRect(l2 - 3, j3 + k3 + 2, l2 + l1 + 3, j3 + k3 + 3, j4, j4);
                for(int k4 = 0; k4 < list.size(); k4++)
                {
                    String s = (String)list.get(k4);
                    fontRenderer.drawStringWithShadow(s, l2, j3, -1);
                    if(k4 == 0)
                    {
                        j3 += 2;
                    }
                    j3 += 10;
                }

                zLevel = 0.0F;
                itemRenderer.field_40268_b = 0.0F;
            }
        }
        GL11.glPopMatrix();
        super.drawScreen(i, j, f);
        GL11.glEnable(2896 /*GL_LIGHTING*/);
        GL11.glEnable(2929 /*GL_DEPTH_TEST*/);
    }

    protected void drawGuiContainerForegroundLayer()
    {
    }

    protected abstract void drawGuiContainerBackgroundLayer(float f, int i, int j);

    private void drawSlotInventory(Slot slot)
    {
        int i = slot.xDisplayPosition;
        int j = slot.yDisplayPosition;
        ItemStack itemstack = slot.getStack();
        boolean flag = false;
        zLevel = 100F;
        itemRenderer.field_40268_b = 100F;
        if(itemstack == null)
        {
            int k = slot.getBackgroundIconIndex();
            if(k >= 0)
            {
                GL11.glDisable(2896 /*GL_LIGHTING*/);
                mc.renderEngine.bindTexture(mc.renderEngine.getTexture("/gui/items.png"));
                drawTexturedModalRect(i, j, (k % 16) * 16, (k / 16) * 16, 16, 16);
                GL11.glEnable(2896 /*GL_LIGHTING*/);
                flag = true;
            }
        }
        if(!flag)
        {
            itemRenderer.renderItemIntoGUI(fontRenderer, mc.renderEngine, itemstack, i, j);
            itemRenderer.renderItemOverlayIntoGUI(fontRenderer, mc.renderEngine, itemstack, i, j);
        }
        itemRenderer.field_40268_b = 0.0F;
        zLevel = 0.0F;
        if(this == null)
        {
            zLevel = 100F;
            itemRenderer.field_40268_b = 100F;
            if(itemstack == null)
            {
                int l = slot.getBackgroundIconIndex();
                if(l >= 0)
                {
                    GL11.glDisable(2896 /*GL_LIGHTING*/);
                    mc.renderEngine.bindTexture(mc.renderEngine.getTexture("/gui/items.png"));
                    drawTexturedModalRect(i, j, (l % 16) * 16, (l / 16) * 16, 16, 16);
                    GL11.glEnable(2896 /*GL_LIGHTING*/);
                    flag = true;
                }
            }
            if(!flag)
            {
                itemRenderer.renderItemIntoGUI(fontRenderer, mc.renderEngine, itemstack, i, j);
                itemRenderer.renderItemOverlayIntoGUI(fontRenderer, mc.renderEngine, itemstack, i, j);
            }
            itemRenderer.field_40268_b = 0.0F;
            zLevel = 0.0F;
        }
    }

    private Slot getSlotAtPosition(int i, int j)
    {
        for(int k = 0; k < inventorySlots.inventorySlots.size(); k++)
        {
            Slot slot = (Slot)inventorySlots.inventorySlots.get(k);
            if(getIsMouseOverSlot(slot, i, j))
            {
                return slot;
            }
        }

        return null;
    }

    protected void mouseClicked(int i, int j, int k)
    {
        super.mouseClicked(i, j, k);
        int l = xSize;
        int i1 = ySize;
        int j1 = field_40216_e;
        int k1 = field_40215_f;
        Slot slot = getSlotAtPosition(i, j);
        Minecraft minecraft = mc;
        Container container = inventorySlots;
        boolean flag = i >= j1 && j >= k1 && i <= j1 + l && j <= k1 + i1;
        if(k >= 0 && k <= 2)
        {
            tmi.replacementClickHandler(i, j, k, flag, slot, minecraft, container);
        }
    }

    private boolean getIsMouseOverSlot(Slot slot, int i, int j)
    {
        int k = field_40216_e;
        int l = field_40215_f;
        i -= k;
        j -= l;
        return i >= slot.xDisplayPosition - 1 && i < slot.xDisplayPosition + 16 + 1 && j >= slot.yDisplayPosition - 1 && j < slot.yDisplayPosition + 16 + 1;
    }

    protected void func_35309_a(Slot slot, int i, int j, boolean flag)
    {
        if(slot != null)
        {
            i = slot.slotNumber;
        }
        mc.playerController.windowClick(inventorySlots.windowId, i, j, flag, mc.thePlayer);
    }

    protected void mouseMovedOrUp(int i, int j, int k)
    {
        if(k != 0);
    }

    protected void keyTyped(char c, int i)
    {
        if(i == 1 || i == mc.gameSettings.keyBindInventory.keyCode)
        {
            mc.thePlayer.closeScreen();
        }
    }

    public void onGuiClosed()
    {
        if(mc.thePlayer != null)
        {
            inventorySlots.onCraftGuiClosed(mc.thePlayer);
            mc.playerController.func_20086_a(inventorySlots.windowId, mc.thePlayer);
        }
    }

    public boolean doesGuiPauseGame()
    {
        return false;
    }

    public void updateScreen()
    {
        super.updateScreen();
        if(!mc.thePlayer.isEntityAlive() || mc.thePlayer.isDead)
        {
            mc.thePlayer.closeScreen();
        }
    }

    public void fastTransfer(int i, int j)
    {
        ItemStack itemstack = TMIUtils.getHeldItem();
        mc.playerController.windowClick(inventorySlots.windowId, i, j, false, mc.thePlayer);
        int k = inventorySlots.inventoryItemStacks.size() - 36;
        boolean flag = i < k;
        int l = 0;
        int i1 = k;
        int j1 = k - 1;
        int k1 = inventorySlots.inventoryItemStacks.size();
        if(flag)
        {
            l = k;
            i1 = inventorySlots.inventoryItemStacks.size();
            j1 = -1;
            k1 = k;
        }
        boolean flag1 = true;
        do
        {
            if(l >= i1 || j1 >= k1)
            {
                break;
            }
            Slot slot = (Slot)inventorySlots.inventorySlots.get(l);
            if(slot != null)
            {
                ItemStack itemstack1 = slot.getStack();
                if(itemstack1 != null && itemstack1.itemID == itemstack.itemID && itemstack1.getItemDamage() == itemstack.getItemDamage())
                {
                    Slot slot1;
                    if(flag1)
                    {
                        slot1 = (Slot)inventorySlots.inventorySlots.get(i);
                    } else
                    {
                        slot1 = (Slot)inventorySlots.inventorySlots.get(j1);
                    }
                    if(slot1 == null)
                    {
                        j1++;
                        flag1 = false;
                        continue;
                    }
                    ItemStack itemstack2 = slot1.getStack();
                    if(itemstack2 == null)
                    {
                        slot1.putStack(itemstack1);
                        slot.putStack((ItemStack)null);
                    } else
                    if(itemstack2.itemID == itemstack1.itemID && itemstack2.getItemDamage() == itemstack1.getItemDamage())
                    {
                        int l1 = itemstack1.stackSize + itemstack2.stackSize;
                        int i2 = Item.itemsList[itemstack1.itemID].getItemStackLimit();
                        int j2 = l1 - i2;
                        if(j2 > 0)
                        {
                            itemstack2.stackSize = i2;
                            itemstack1.stackSize = j2;
                            j1++;
                            flag1 = false;
                            continue;
                        }
                        itemstack2.stackSize = l1;
                        slot.putStack((ItemStack)null);
                    } else
                    {
                        j1++;
                        flag1 = false;
                        continue;
                    }
                }
            }
            l++;
        } while(true);
    }

}
